<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">cHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTUFQTUVTU0FHRSA9ICJATUFQTUVTU0FHRV9BU19E
T0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBIQVNIVEFCTEUgPSAiQEhBU0hUQUJM
RV9BU19ET0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBTVFJFQU0gPSAiQFNUUkVB
TV9BU19ET0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBCWVRFUyA9ICJAQllURVNf
QVNfRE9DQDoiOw0KcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTk9ERSA9ICJATk9ERV9BU19E
T0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBBUlJBWUxJU1QgPSAiQEFSUkFZTElT
VF9BU19ET0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBFTlRSSUVTID0gImVudHJp
ZXMiOw0KcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgRU5UUlkgPSAiZW50cnkiOw0KcHVibGlj
IHN0YXRpYyBmaW5hbCBTdHJpbmcgVkFMVUUgPSAidmFsdWUiOw0KcHJpdmF0ZSBzdGF0aWMgZmlu
YWwgU3RyaW5nIEtFWSA9ICJrZXkiOw0KcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFVURl84
ID0gIlVURi04IjsNCg0KLy8gRG8gbm90IGFjY2VzcyBwcmV2aW91c1RpbWVzdGFtcCB3aXRob3V0
IHN5bmNocm9uaXphdGlvbiBvbiB0aW1lU3RhbXBMb2NrIQ0KcHJpdmF0ZSBzdGF0aWMgbG9uZyBw
cmV2aW91c1RpbWVzdGFtcDsNCnByaXZhdGUgc3RhdGljIGZpbmFsIE9iamVjdCBwcmV2aW91c1Rp
bWVzdGFtcExvY2sgPSBuZXcgT2JqZWN0KCk7DQpwcml2YXRlIHN0YXRpYyBmaW5hbCBEYXRlVGlt
ZUZvcm1hdHRlciB0aW1lc3RhbXBGb3JtYXR0ZXIgPSBEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRl
cm4oInl5eXlNTWRkJ1QnSEhtbXNzLlNTUyIpOw0KDQpAU3VwcHJlc3NXYXJuaW5ncyh7ICJyYXd0
eXBlcyIsICJ1bmNoZWNrZWQiLCAicmVzb3VyY2UiIH0pDQpwdWJsaWMgc3RhdGljIElEYXRhIGR1
cGxpY2F0ZU9iamVjdHNBc0RvY3NJbXBsKElEYXRhIGlEYXRhKSB7DQoJDQoJSURhdGFNYXAgaURh
dGFNYXAgPSBuZXcgSURhdGFNYXAoaURhdGEpOw0KCQ0KCVNldDxTdHJpbmc+IGtleVNldCA9IGlE
YXRhTWFwLmtleVNldCgpOw0KCWZvciAoU3RyaW5nIGtleSA6IGtleVNldCkgew0KCQlPYmplY3Qg
b2JqZWN0ID0gaURhdGFNYXAuZ2V0KGtleSk7DQoJCQ0KCQlpZiAob2JqZWN0IGluc3RhbmNlb2Yg
TWFwTWVzc2FnZSkgew0KCQkJbG9nKG9iamVjdC5nZXRDbGFzcygpLmdldENhbm9uaWNhbE5hbWUo
KSk7DQoJCQlNYXBNZXNzYWdlIG1hcE1lc3NhZ2UgPSAoTWFwTWVzc2FnZSkgb2JqZWN0Ow0KCQkJ
dHJ5IHsNCgkJCQlFbnVtZXJhdGlvbiBuYW1lcyA9IG1hcE1lc3NhZ2UuZ2V0TWFwTmFtZXMoKTsN
CgkJCQlJRGF0YSBtYXBNZXNzYWdlRG9jID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOw0KCQkJCUlE
YXRhTWFwIG1hcE1lc3NhZ2VEb2NNYXAgPSBuZXcgSURhdGFNYXAobWFwTWVzc2FnZURvYyk7DQoJ
CQkJd2hpbGUgKG5hbWVzLmhhc01vcmVFbGVtZW50cygpKSB7DQoJCQkJCVN0cmluZyBlbnVtS2V5
ID0gbmFtZXMubmV4dEVsZW1lbnQoKS50b1N0cmluZygpOw0KCQkJCQlPYmplY3QgdmFsdWUgPSBt
YXBNZXNzYWdlLmdldE9iamVjdChlbnVtS2V5KTsNCgkJCQkJbWFwTWVzc2FnZURvY01hcC5wdXQo
ZW51bUtleSwgdmFsdWUpOw0KCQkJCX0NCgkJCQlpRGF0YU1hcC5wdXQoTUFQTUVTU0FHRSArIGtl
eSwgbWFwTWVzc2FnZURvYyk7DQoJCQkJLy8gR28gb24gbGlrZSBhIG5vcm1hbCBJRGF0YQ0KCQkJ
CWR1cGxpY2F0ZU9iamVjdHNBc0RvY3NJbXBsKG1hcE1lc3NhZ2VEb2MpOw0KCQkJfSBjYXRjaCAo
Sk1TRXhjZXB0aW9uIGUpIHsNCgkJCX0NCgkJfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBI
YXNodGFibGUpIHsNCgkJCUlEYXRhIGhhc2h0YWJsZURvYyA9IElEYXRhRmFjdG9yeS5jcmVhdGUo
KTsNCgkJCUlEYXRhTWFwIGhhc2h0YWJsZU1hcCA9IG5ldyBJRGF0YU1hcChoYXNodGFibGVEb2Mp
Ow0KCQkJSGFzaHRhYmxlPFN0cmluZywgT2JqZWN0PiBoYXNoVGFibGUgPSAoSGFzaHRhYmxlPFN0
cmluZywgT2JqZWN0Pikgb2JqZWN0Ow0KCQkJU2V0IGhhc2hLZXlzID0gaGFzaFRhYmxlLmtleVNl
dCgpOw0KCQkJSURhdGFbXQllbnRyaWVzID0gbmV3IElEYXRhW2hhc2hLZXlzLnNpemUoKV07DQoJ
CQlpbnQgaSA9IDA7DQoJCQlmb3IgKE9iamVjdCBoYXNoS2V5T2JqZWN0IDogaGFzaEtleXMpIHsN
CgkJCQlTdHJpbmcgaGFzaEtleSA9IChTdHJpbmcpIGhhc2hLZXlPYmplY3Q7DQoJCQkJT2JqZWN0
IGhhc2hPYmplY3QgPSBoYXNoVGFibGUuZ2V0KGhhc2hLZXkpOw0KCQkJCWVudHJpZXNbaV0gPSBJ
RGF0YUZhY3RvcnkuY3JlYXRlKCk7DQoJCQkJSURhdGFNYXAgZW50cml5TWFwID0gbmV3IElEYXRh
TWFwKGVudHJpZXNbaV0pOw0KCQkJCWVudHJpeU1hcC5wdXQoS0VZLCBoYXNoS2V5KTsNCgkJCQll
bnRyaXlNYXAucHV0KFZBTFVFLCBoYXNoT2JqZWN0KTsNCgkJCQlpKys7DQoJCQl9DQoJCQloYXNo
dGFibGVNYXAucHV0KEVOVFJJRVMsIGVudHJpZXMpOw0KCQkJaURhdGFNYXAucHV0KEhBU0hUQUJM
RSArIGtleSwgaGFzaHRhYmxlRG9jKTsNCgkJfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBJ
bnB1dFN0cmVhbSkgew0KCQkJSW5wdXRTdHJlYW0gc3RyZWFtID0gKElucHV0U3RyZWFtKSBvYmpl
Y3Q7DQoJCQlmaW5hbCBpbnQgYXJyYXlTaXplID0gMTAyNDsNCgkJCWJ5dGVbXSBieXRlQXJyYXkg
PSBuZXcgYnl0ZVthcnJheVNpemVdOw0KCQkJU3RyaW5nQnVpbGRlciBidWlsZGVyID0gbmV3IFN0
cmluZ0J1aWxkZXIoKTsNCgkJCXRyeSB7DQoJCQkJaW50IHJlZCA9IDA7DQoJCQkJd2hpbGUoKHJl
ZCA9IHN0cmVhbS5yZWFkKGJ5dGVBcnJheSkpID4gMCkgew0KCQkJCQlpZiAocmVkID09IGFycmF5
U2l6ZSkgew0KCQkJCQkJYnVpbGRlci5hcHBlbmQobmV3IFN0cmluZyhieXRlQXJyYXksIFVURl84
KSk7DQoJCQkJCX0gZWxzZSB7DQoJCQkJCQlidWlsZGVyLmFwcGVuZChuZXcgU3RyaW5nKEFycmF5
cy5jb3B5T2YoYnl0ZUFycmF5LCByZWQpKSk7DQoJCQkJCX0NCgkJCQl9DQoJCQl9IGNhdGNoIChJ
T0V4Y2VwdGlvbiBlKSB7DQoJCQl9DQoJCQkNCgkJCWlEYXRhTWFwLnB1dChTVFJFQU0gKyBrZXks
IGJ1aWxkZXIudG9TdHJpbmcoKSk7DQoJCQl0cnkgew0KCQkJCXN0cmVhbS5yZXNldCgpOw0KCQkJ
fSBjYXRjaCAoSU9FeGNlcHRpb24gZSkge30NCgkJfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2Vv
ZiBBcnJheUxpc3QpIHsNCgkJCUFycmF5TGlzdCBhcnJheUxpc3QgPSAoQXJyYXlMaXN0KSBvYmpl
Y3Q7DQoJCQlJRGF0YSBhcnJheUxpc3REb2MgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7DQoJCQlJ
RGF0YU1hcCBhcnJheUxpc3RNYXAgPSBuZXcgSURhdGFNYXAoYXJyYXlMaXN0RG9jKTsNCgkJCUlE
YXRhW10JZW50cmllcyA9IG5ldyBJRGF0YVthcnJheUxpc3Quc2l6ZSgpXTsNCgkJCWZvciAoaW50
IGkgPSAwOyBpIDwgYXJyYXlMaXN0LnNpemUoKTsgaSsrKSB7DQoJCQkJT2JqZWN0IGFycmF5TGlz
dE9iamVjdCA9IGFycmF5TGlzdC5nZXQoaSk7DQoJCQkJaWYgKGFycmF5TGlzdE9iamVjdCBpbnN0
YW5jZW9mIElEYXRhKSB7DQoJCQkJCWVudHJpZXNbaV0gPSAoSURhdGEpIGFycmF5TGlzdE9iamVj
dDsNCgkJCQl9DQoJCQl9DQoJCQlhcnJheUxpc3RNYXAucHV0KEVOVFJJRVMsIGVudHJpZXMpOw0K
CQkJaURhdGFNYXAucHV0KEFSUkFZTElTVCArIGtleSwgYXJyYXlMaXN0RG9jKTsNCgkJfSBlbHNl
IGlmIChvYmplY3QgaW5zdGFuY2VvZiBieXRlW10pIHsNCgkJCXRyeSB7DQoJCQkJaURhdGFNYXAu
cHV0KEJZVEVTICsga2V5LCBuZXcgU3RyaW5nKChieXRlW10pIG9iamVjdCwgVVRGXzgpKTsNCgkJ
CX0gY2F0Y2ggKFVuc3VwcG9ydGVkRW5jb2RpbmdFeGNlcHRpb24gZSkgew0KCQkJfQ0KCQl9IGVs
c2UgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE5vZGUpIHsNCgkJCWlEYXRhTWFwLnB1dChOT0RFICsg
a2V5LCBub2RlVG9Eb2N1bWVudCgoTm9kZSkgb2JqZWN0KSk7DQoJCX0gZWxzZSBpZiAob2JqZWN0
IGluc3RhbmNlb2YgSURhdGEpIHsNCgkJCWR1cGxpY2F0ZU9iamVjdHNBc0RvY3NJbXBsKChJRGF0
YSkgb2JqZWN0KTsNCgkJfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBJRGF0YVtdKSB7DQoJ
CQlmb3IoSURhdGEgaURhdGFPZkFycmF5IDogKElEYXRhW10pIG9iamVjdCkgew0KCQkJCWR1cGxp
Y2F0ZU9iamVjdHNBc0RvY3NJbXBsKGlEYXRhT2ZBcnJheSk7DQoJCQl9DQoJCX0NCgl9DQoNCgly
ZXR1cm4gaURhdGE7DQp9DQoNCnB1YmxpYyBzdGF0aWMgSURhdGEgcmVwbGljYXRlT2JqZWN0c0Zy
b21Eb2NzSW1wbChJRGF0YSBpRGF0YSkgew0KCQ0KCUlEYXRhTWFwIGlEYXRhTWFwID0gbmV3IElE
YXRhTWFwKGlEYXRhKTsNCgkNCglTZXQ8U3RyaW5nPiBrZXlTZXQgPSBpRGF0YU1hcC5rZXlTZXQo
KTsNCglmb3IgKFN0cmluZyBrZXkgOiBrZXlTZXQpIHsNCgkJaWYgKGtleS5zdGFydHNXaXRoKEhB
U0hUQUJMRSkpIHsNCgkJCUlEYXRhIGhhc2h0YWJsZURvYyA9IChJRGF0YSkgaURhdGFNYXAuZ2V0
KGtleSk7DQoJCQlJRGF0YU1hcCBoYXNodGFibGVNYXAgPSBuZXcgSURhdGFNYXAoaGFzaHRhYmxl
RG9jKTsNCgkJCUlEYXRhW10gZW50cmllcyA9IGhhc2h0YWJsZU1hcC5nZXRBc0lEYXRhQXJyYXko
RU5UUklFUyk7DQoJCQlIYXNodGFibGU8U3RyaW5nLCBPYmplY3Q+IGhhc2h0YWJsZSA9IG5ldyBI
YXNodGFibGU8U3RyaW5nLCBPYmplY3Q+KGVudHJpZXMubGVuZ3RoKTsNCgkJCWZvciAoSURhdGEg
ZW50cnkgOiBlbnRyaWVzKSB7DQoJCQkJSURhdGFNYXAgZW50cnlNYXAgPSBuZXcgSURhdGFNYXAo
ZW50cnkpOw0KCQkJCVN0cmluZyBoYXNoS2V5ID0gZW50cnlNYXAuZ2V0QXNTdHJpbmcoS0VZKTsN
CgkJCQlPYmplY3QgdmFsdWVPYmplY3QgPSBlbnRyeU1hcC5nZXQoVkFMVUUpOw0KCQkJCWhhc2h0
YWJsZS5wdXQoaGFzaEtleSwgdmFsdWVPYmplY3QpOw0KCQkJfQ0KCQkJaURhdGFNYXAucHV0KGtl
eS5zdWJzdHJpbmcoSEFTSFRBQkxFLmxlbmd0aCgpKSwgaGFzaHRhYmxlKTsNCgkJfSBlbHNlIGlm
IChrZXkuc3RhcnRzV2l0aChTVFJFQU0pKSB7DQoJCQlTdHJpbmcgc3RyZWFtU3RyaW5nID0gaURh
dGFNYXAuZ2V0QXNTdHJpbmcoa2V5KTsNCg0KCQkJLy8gaW5wdXQNCgkJCUlEYXRhIGlucHV0ID0g
SURhdGFGYWN0b3J5LmNyZWF0ZSgpOw0KCQkJSURhdGFNYXAgaW5wdXRNYXAgPSBuZXcgSURhdGFN
YXAoaW5wdXQpOw0KCQkJaW5wdXRNYXAucHV0KCJzdHJpbmciLCBzdHJlYW1TdHJpbmcpOw0KCQkJ
aW5wdXRNYXAucHV0KCJlbmNvZGluZyIsIFVURl84KTsNCg0KCQkJLy8gb3V0cHV0DQoJCQlJRGF0
YSBvdXRwdXQgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7DQoJCQl0cnl7DQoJCQkJb3V0cHV0ID0g
U2VydmljZS5kb0ludm9rZSgicHViLmlvIiwgInN0cmluZ1RvU3RyZWFtIiwgaW5wdXQpOw0KCQkJ
fSBjYXRjaChFeGNlcHRpb24gZSl7fQ0KCQkJSURhdGFNYXAgb3V0cHV0TWFwID0gbmV3IElEYXRh
TWFwKG91dHB1dCk7DQoJCQlPYmplY3QgaW5wdXRTdHJlYW0gPSBvdXRwdXRNYXAuZ2V0KCJpbnB1
dFN0cmVhbSIgKTsNCg0KCQkJaURhdGFNYXAucHV0KGtleS5zdWJzdHJpbmcoU1RSRUFNLmxlbmd0
aCgpKSwgaW5wdXRTdHJlYW0pOw0KCQl9IGVsc2UgaWYgKGtleS5zdGFydHNXaXRoKEFSUkFZTElT
VCkpIHsNCgkJCUlEYXRhIGFycmF5TGlzdERvYyA9IChJRGF0YSkgaURhdGFNYXAuZ2V0KGtleSk7
DQoJCQlJRGF0YU1hcCBhcnJheUxpc3RNYXAgPSBuZXcgSURhdGFNYXAoYXJyYXlMaXN0RG9jKTsN
CgkJCUlEYXRhW10gZW50cmllcyA9IGFycmF5TGlzdE1hcC5nZXRBc0lEYXRhQXJyYXkoRU5UUklF
Uyk7DQoJCQlBcnJheUxpc3Q8SURhdGE+IGFycmF5TGlzdCA9IG5ldyBBcnJheUxpc3Q8SURhdGE+
KGVudHJpZXMubGVuZ3RoKTsNCgkJCWZvciAoSURhdGEgZW50cnkgOiBlbnRyaWVzKSB7DQoJCQkJ
YXJyYXlMaXN0LmFkZChlbnRyeSk7DQoJCQl9DQoJCQlpRGF0YU1hcC5wdXQoa2V5LnN1YnN0cmlu
ZyhBUlJBWUxJU1QubGVuZ3RoKCkpLCBhcnJheUxpc3QpOw0KCQl9IGVsc2UgaWYgKGtleS5zdGFy
dHNXaXRoKEJZVEVTKSkgew0KCQkJU3RyaW5nIGJ5dGVzU3RyaW5nID0gaURhdGFNYXAuZ2V0QXNT
dHJpbmcoa2V5KTsNCgkJCXRyeSB7DQoJCQkJaURhdGFNYXAucHV0KGtleS5zdWJzdHJpbmcoQllU
RVMubGVuZ3RoKCkpLCBieXRlc1N0cmluZy5nZXRCeXRlcyhVVEZfOCkpOw0KCQkJfSBjYXRjaCAo
VW5zdXBwb3J0ZWRFbmNvZGluZ0V4Y2VwdGlvbiBlKSB7DQoJCQl9DQoJCX0gZWxzZSBpZiAoa2V5
LnN0YXJ0c1dpdGgoTk9ERSkpIHsNCgkJCUlEYXRhIG5vZGVEb2MgPSBpRGF0YU1hcC5nZXRBc0lE
YXRhKGtleSk7DQoJCQl4bWxTdHJpbmdUb05vZGUoZG9jdW1lbnRUb1htbFN0cmluZyhub2RlRG9j
KSk7DQoJCQlpRGF0YU1hcC5wdXQoa2V5LnN1YnN0cmluZyhOT0RFLmxlbmd0aCgpKSwgeG1sU3Ry
aW5nVG9Ob2RlKGRvY3VtZW50VG9YbWxTdHJpbmcobm9kZURvYykpKTsNCgkJfSBlbHNlIGlmIChp
RGF0YU1hcC5nZXQoa2V5KSBpbnN0YW5jZW9mIElEYXRhKSB7DQoJCQlyZXBsaWNhdGVPYmplY3Rz
RnJvbURvY3NJbXBsKChJRGF0YSkgaURhdGFNYXAuZ2V0KGtleSkpOw0KCQl9IGVsc2UgaWYgKGlE
YXRhTWFwLmdldChrZXkpIGluc3RhbmNlb2YgSURhdGFbXSkgew0KCQkJZm9yKElEYXRhIGlEYXRh
T2ZBcnJheSA6IChJRGF0YVtdKSBpRGF0YU1hcC5nZXQoa2V5KSkgew0KCQkJCXJlcGxpY2F0ZU9i
amVjdHNGcm9tRG9jc0ltcGwoaURhdGFPZkFycmF5KTsNCgkJCX0NCgkJfQ0KCX0NCg0KCXJldHVy
biBpRGF0YTsNCn0NCg0KcHJpdmF0ZSBzdGF0aWMgSURhdGEgbm9kZVRvRG9jdW1lbnQoTm9kZSBu
b2RlKSB7DQoNCgkvLyBpbnB1dA0KCUlEYXRhIGlucHV0ID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgp
Ow0KCUlEYXRhQ3Vyc29yIGlucHV0Q3Vyc29yID0gaW5wdXQuZ2V0Q3Vyc29yKCk7DQoJSURhdGFV
dGlsLnB1dCggaW5wdXRDdXJzb3IsICJub2RlIiwgbm9kZSApOw0KDQoJLy8gb3V0cHV0DQoJSURh
dGEgCW91dHB1dCA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsNCgl0cnl7DQoJCW91dHB1dCA9IFNl
cnZpY2UuZG9JbnZva2UoICJwdWIueG1sIiwgInhtbE5vZGVUb0RvY3VtZW50IiwgaW5wdXQgKTsN
Cgl9Y2F0Y2goIEV4Y2VwdGlvbiBlKXt9DQoJSURhdGFDdXJzb3Igb3V0cHV0Q3Vyc29yID0gb3V0
cHV0LmdldEN1cnNvcigpOw0KDQoJLy8gZG9jdW1lbnQNCglJRGF0YQlkb2N1bWVudCA9IElEYXRh
VXRpbC5nZXRJRGF0YSggb3V0cHV0Q3Vyc29yLCAiZG9jdW1lbnQiICk7DQoJb3V0cHV0Q3Vyc29y
LmRlc3Ryb3koKTsNCgkNCglyZXR1cm4gZG9jdW1lbnQ7DQoNCn0NCg0KcHJpdmF0ZSBzdGF0aWMg
U3RyaW5nIGRvY3VtZW50VG9YbWxTdHJpbmcoSURhdGEgaWRhdGEpIHsNCg0KCS8vIGlucHV0DQoJ
SURhdGEgaW5wdXQgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7DQoJSURhdGFDdXJzb3IgaW5wdXRD
dXJzb3IgPSBpbnB1dC5nZXRDdXJzb3IoKTsNCg0KCS8vIGRvY3VtZW50DQoJSURhdGFVdGlsLnB1
dCggaW5wdXRDdXJzb3IsICJkb2N1bWVudCIsIGlkYXRhICk7DQoNCgkvLyBvdXRwdXQNCglJRGF0
YSAJb3V0cHV0ID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOw0KCXRyeXsNCgkJb3V0cHV0ID0gU2Vy
dmljZS5kb0ludm9rZSggInB1Yi54bWwiLCAiZG9jdW1lbnRUb1hNTFN0cmluZyIsIGlucHV0ICk7
DQoJfWNhdGNoKCBFeGNlcHRpb24gZSl7fQ0KCUlEYXRhQ3Vyc29yIG91dHB1dEN1cnNvciA9IG91
dHB1dC5nZXRDdXJzb3IoKTsNCgkJU3RyaW5nCXhtbGRhdGEgPSBJRGF0YVV0aWwuZ2V0U3RyaW5n
KCBvdXRwdXRDdXJzb3IsICJ4bWxkYXRhIiApOw0KCW91dHB1dEN1cnNvci5kZXN0cm95KCk7DQoN
CglyZXR1cm4geG1sZGF0YTsNCn0NCg0KcHJpdmF0ZSBzdGF0aWMgTm9kZSB4bWxTdHJpbmdUb05v
ZGUoU3RyaW5nIHhtbFN0cmluZykgew0KDQoJLy8gaW5wdXQNCglJRGF0YSBpbnB1dCA9IElEYXRh
RmFjdG9yeS5jcmVhdGUoKTsNCglJRGF0YUN1cnNvciBpbnB1dEN1cnNvciA9IGlucHV0LmdldEN1
cnNvcigpOw0KCUlEYXRhVXRpbC5wdXQoIGlucHV0Q3Vyc29yLCAieG1sZGF0YSIsIHhtbFN0cmlu
ZyApOw0KDQoJLy8gb3V0cHV0DQoJSURhdGEgCW91dHB1dCA9IElEYXRhRmFjdG9yeS5jcmVhdGUo
KTsNCgl0cnl7DQoJCW91dHB1dCA9IFNlcnZpY2UuZG9JbnZva2UoICJwdWIueG1sIiwgInhtbFN0
cmluZ1RvWE1MTm9kZSIsIGlucHV0ICk7DQoJfWNhdGNoKCBFeGNlcHRpb24gZSl7fQ0KCUlEYXRh
Q3Vyc29yIG91dHB1dEN1cnNvciA9IG91dHB1dC5nZXRDdXJzb3IoKTsNCgkJT2JqZWN0CW5vZGUg
PSBJRGF0YVV0aWwuZ2V0KCBvdXRwdXRDdXJzb3IsICJub2RlIiApOw0KCW91dHB1dEN1cnNvci5k
ZXN0cm95KCk7DQoJDQoJcmV0dXJuIChOb2RlKSBub2RlOw0KfQ0KDQpwdWJsaWMgc3RhdGljIHZv
aWQgbG9nKFN0cmluZyBtZXNzYWdlKSB7DQoJLy8gaW5wdXQNCglJRGF0YSBpbnB1dCA9IElEYXRh
RmFjdG9yeS5jcmVhdGUoKTsNCglJRGF0YUN1cnNvciBpbnB1dEN1cnNvciA9IGlucHV0LmdldEN1
cnNvcigpOw0KCUlEYXRhVXRpbC5wdXQoaW5wdXRDdXJzb3IsICJtZXNzYWdlIiwgbWVzc2FnZSk7
DQoJaW5wdXRDdXJzb3IuZGVzdHJveSgpOw0KDQoJdHJ5IHsNCgkJU2VydmljZS5kb0ludm9rZSgi
cHViLmZsb3ciLCAiZGVidWdMb2ciLCBpbnB1dCk7DQoJfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsN
Cgl9DQp9CQ0KCQ0KCQ0KCQ0K</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>com.wm.util.coder.IDataXMLCoder</value>
    <value>com.wm.app.b2b.server.InvokeState</value>
    <value>java.io.BufferedOutputStream</value>
    <value>java.io.IOException</value>
    <value>java.io.InputStream</value>
    <value>java.io.OutputStream</value>
    <value>java.io.UnsupportedEncodingException</value>
    <value>java.nio.file.Files</value>
    <value>java.nio.file.Path</value>
    <value>java.nio.file.Paths</value>
    <value>java.time.Instant</value>
    <value>java.time.LocalDateTime</value>
    <value>java.time.ZoneId</value>
    <value>java.time.format.DateTimeFormatter</value>
    <value>java.util.ArrayList</value>
    <value>java.util.Arrays</value>
    <value>java.util.Enumeration</value>
    <value>java.util.HashMap</value>
    <value>java.util.Hashtable</value>
    <value>java.util.List</value>
    <value>java.util.Map</value>
    <value>java.util.Set</value>
    <value>java.util.Stack</value>
    <value>javax.jms.JMSException</value>
    <value>javax.jms.MapMessage</value>
    <value>javax.print.attribute.standard.Severity</value>
    <value>com.wm.lang.xml.Node</value>
    <value>com.softwareag.util.IDataMap</value>
  </array>
</Values>
