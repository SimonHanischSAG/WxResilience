<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">cHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTUFQTUVTU0FHRSA9ICJATUFQTUVTU0FHRV9BU19E
T0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBIQVNIVEFCTEUgPSAiQEhBU0hUQUJM
RV9BU19ET0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBTVFJFQU0gPSAiQFNUUkVB
TV9BU19ET0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBCWVRFUyA9ICJAQllURVNf
QVNfRE9DQDoiOw0KcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTk9ERSA9ICJATk9ERV9BU19E
T0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBBUlJBWUxJU1QgPSAiQEFSUkFZTElT
VF9BU19ET0NAOiI7DQpwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBFTlRSSUVTID0gImVudHJp
ZXMiOw0KcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgRU5UUlkgPSAiZW50cnkiOw0KcHVibGlj
IHN0YXRpYyBmaW5hbCBTdHJpbmcgVkFMVUUgPSAidmFsdWUiOw0KcHJpdmF0ZSBzdGF0aWMgZmlu
YWwgU3RyaW5nIEtFWSA9ICJrZXkiOw0KcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFVURl84
ID0gIlVURi04IjsNCg0KLy8gRG8gbm90IGFjY2VzcyBwcmV2aW91c1RpbWVzdGFtcCB3aXRob3V0
IHN5bmNocm9uaXphdGlvbiBvbiB0aW1lU3RhbXBMb2NrIQ0KcHJpdmF0ZSBzdGF0aWMgbG9uZyBw
cmV2aW91c1RpbWVzdGFtcDsNCnByaXZhdGUgc3RhdGljIGZpbmFsIE9iamVjdCBwcmV2aW91c1Rp
bWVzdGFtcExvY2sgPSBuZXcgT2JqZWN0KCk7DQpwcml2YXRlIHN0YXRpYyBmaW5hbCBEYXRlVGlt
ZUZvcm1hdHRlciB0aW1lc3RhbXBGb3JtYXR0ZXIgPSBEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRl
cm4oInl5eXlNTWRkJ1QnSEhtbXNzLlNTUyIpOw0KDQpAU3VwcHJlc3NXYXJuaW5ncyh7ICJyYXd0
eXBlcyIsICJ1bmNoZWNrZWQiLCAicmVzb3VyY2UiIH0pDQpwdWJsaWMgc3RhdGljIElEYXRhIGR1
cGxpY2F0ZU9iamVjdHNBc0RvY3NJbXBsKElEYXRhIGlEYXRhKSB7DQoJDQoJSURhdGFNYXAgaURh
dGFNYXAgPSBuZXcgSURhdGFNYXAoaURhdGEpOw0KCQ0KCVNldDxTdHJpbmc+IGtleVNldCA9IGlE
YXRhTWFwLmtleVNldCgpOw0KCWZvciAoU3RyaW5nIGtleSA6IGtleVNldCkgew0KCQlPYmplY3Qg
b2JqZWN0ID0gaURhdGFNYXAuZ2V0KGtleSk7DQoJCQ0KCQkvKmlmIChvYmplY3QgaW5zdGFuY2Vv
ZiBNYXBNZXNzYWdlKSB7DQoJCQlkZWJ1Z0xvZ0luZm8ob2JqZWN0LmdldENsYXNzKCkuZ2V0Q2Fu
b25pY2FsTmFtZSgpKTsNCgkJCU1hcE1lc3NhZ2UgbWFwTWVzc2FnZSA9IChNYXBNZXNzYWdlKSBv
YmplY3Q7DQoJCQl0cnkgew0KCQkJCUVudW1lcmF0aW9uIG5hbWVzID0gbWFwTWVzc2FnZS5nZXRN
YXBOYW1lcygpOw0KCQkJCUlEYXRhIG1hcE1lc3NhZ2VEb2MgPSBJRGF0YUZhY3RvcnkuY3JlYXRl
KCk7DQoJCQkJSURhdGFNYXAgbWFwTWVzc2FnZURvY01hcCA9IG5ldyBJRGF0YU1hcChtYXBNZXNz
YWdlRG9jKTsNCgkJCQl3aGlsZSAobmFtZXMuaGFzTW9yZUVsZW1lbnRzKCkpIHsNCgkJCQkJU3Ry
aW5nIGVudW1LZXkgPSBuYW1lcy5uZXh0RWxlbWVudCgpLnRvU3RyaW5nKCk7DQoJCQkJCU9iamVj
dCB2YWx1ZSA9IG1hcE1lc3NhZ2UuZ2V0T2JqZWN0KGVudW1LZXkpOw0KCQkJCQltYXBNZXNzYWdl
RG9jTWFwLnB1dChlbnVtS2V5LCB2YWx1ZSk7DQoJCQkJfQ0KCQkJCWlEYXRhTWFwLnB1dChNQVBN
RVNTQUdFICsga2V5LCBtYXBNZXNzYWdlRG9jKTsNCgkJCQkvLyBHbyBvbiBsaWtlIGEgbm9ybWFs
IElEYXRhDQoJCQkJZHVwbGljYXRlT2JqZWN0c0FzRG9jc0ltcGwobWFwTWVzc2FnZURvYyk7DQoJ
CQl9IGNhdGNoIChKTVNFeGNlcHRpb24gZSkgew0KCQkJfQ0KCQl9IGVsc2UqLyBpZiAob2JqZWN0
IGluc3RhbmNlb2YgSGFzaHRhYmxlKSB7DQoJCQlJRGF0YSBoYXNodGFibGVEb2MgPSBJRGF0YUZh
Y3RvcnkuY3JlYXRlKCk7DQoJCQlJRGF0YU1hcCBoYXNodGFibGVNYXAgPSBuZXcgSURhdGFNYXAo
aGFzaHRhYmxlRG9jKTsNCgkJCUhhc2h0YWJsZTxTdHJpbmcsIE9iamVjdD4gaGFzaFRhYmxlID0g
KEhhc2h0YWJsZTxTdHJpbmcsIE9iamVjdD4pIG9iamVjdDsNCgkJCVNldCBoYXNoS2V5cyA9IGhh
c2hUYWJsZS5rZXlTZXQoKTsNCgkJCUlEYXRhW10JZW50cmllcyA9IG5ldyBJRGF0YVtoYXNoS2V5
cy5zaXplKCldOw0KCQkJaW50IGkgPSAwOw0KCQkJZm9yIChPYmplY3QgaGFzaEtleU9iamVjdCA6
IGhhc2hLZXlzKSB7DQoJCQkJU3RyaW5nIGhhc2hLZXkgPSAoU3RyaW5nKSBoYXNoS2V5T2JqZWN0
Ow0KCQkJCU9iamVjdCBoYXNoT2JqZWN0ID0gaGFzaFRhYmxlLmdldChoYXNoS2V5KTsNCgkJCQll
bnRyaWVzW2ldID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOw0KCQkJCUlEYXRhTWFwIGVudHJpeU1h
cCA9IG5ldyBJRGF0YU1hcChlbnRyaWVzW2ldKTsNCgkJCQllbnRyaXlNYXAucHV0KEtFWSwgaGFz
aEtleSk7DQoJCQkJZW50cml5TWFwLnB1dChWQUxVRSwgaGFzaE9iamVjdCk7DQoJCQkJaSsrOw0K
CQkJfQ0KCQkJaGFzaHRhYmxlTWFwLnB1dChFTlRSSUVTLCBlbnRyaWVzKTsNCgkJCWlEYXRhTWFw
LnB1dChIQVNIVEFCTEUgKyBrZXksIGhhc2h0YWJsZURvYyk7DQoJCX0gZWxzZSBpZiAob2JqZWN0
IGluc3RhbmNlb2YgSW5wdXRTdHJlYW0pIHsNCgkJCUlucHV0U3RyZWFtIHN0cmVhbSA9IChJbnB1
dFN0cmVhbSkgb2JqZWN0Ow0KCQkJZmluYWwgaW50IGFycmF5U2l6ZSA9IDEwMjQ7DQoJCQlieXRl
W10gYnl0ZUFycmF5ID0gbmV3IGJ5dGVbYXJyYXlTaXplXTsNCgkJCVN0cmluZ0J1aWxkZXIgYnVp
bGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7DQoJCQl0cnkgew0KCQkJCWludCByZWQgPSAwOw0K
CQkJCXdoaWxlKChyZWQgPSBzdHJlYW0ucmVhZChieXRlQXJyYXkpKSA+IDApIHsNCgkJCQkJaWYg
KHJlZCA9PSBhcnJheVNpemUpIHsNCgkJCQkJCWJ1aWxkZXIuYXBwZW5kKG5ldyBTdHJpbmcoYnl0
ZUFycmF5LCBVVEZfOCkpOw0KCQkJCQl9IGVsc2Ugew0KCQkJCQkJYnVpbGRlci5hcHBlbmQobmV3
IFN0cmluZyhBcnJheXMuY29weU9mKGJ5dGVBcnJheSwgcmVkKSkpOw0KCQkJCQl9DQoJCQkJfQ0K
CQkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KCQkJfQ0KCQkJDQoJCQlpRGF0YU1hcC5wdXQo
U1RSRUFNICsga2V5LCBidWlsZGVyLnRvU3RyaW5nKCkpOw0KCQkJdHJ5IHsNCgkJCQlzdHJlYW0u
cmVzZXQoKTsNCgkJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHt9DQoJCX0gZWxzZSBpZiAob2Jq
ZWN0IGluc3RhbmNlb2YgQXJyYXlMaXN0KSB7DQoJCQlBcnJheUxpc3QgYXJyYXlMaXN0ID0gKEFy
cmF5TGlzdCkgb2JqZWN0Ow0KCQkJSURhdGEgYXJyYXlMaXN0RG9jID0gSURhdGFGYWN0b3J5LmNy
ZWF0ZSgpOw0KCQkJSURhdGFNYXAgYXJyYXlMaXN0TWFwID0gbmV3IElEYXRhTWFwKGFycmF5TGlz
dERvYyk7DQoJCQlJRGF0YVtdCWVudHJpZXMgPSBuZXcgSURhdGFbYXJyYXlMaXN0LnNpemUoKV07
DQoJCQlmb3IgKGludCBpID0gMDsgaSA8IGFycmF5TGlzdC5zaXplKCk7IGkrKykgew0KCQkJCU9i
amVjdCBhcnJheUxpc3RPYmplY3QgPSBhcnJheUxpc3QuZ2V0KGkpOw0KCQkJCWlmIChhcnJheUxp
c3RPYmplY3QgaW5zdGFuY2VvZiBJRGF0YSkgew0KCQkJCQllbnRyaWVzW2ldID0gKElEYXRhKSBh
cnJheUxpc3RPYmplY3Q7DQoJCQkJfQ0KCQkJfQ0KCQkJYXJyYXlMaXN0TWFwLnB1dChFTlRSSUVT
LCBlbnRyaWVzKTsNCgkJCWlEYXRhTWFwLnB1dChBUlJBWUxJU1QgKyBrZXksIGFycmF5TGlzdERv
Yyk7DQoJCX0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgYnl0ZVtdKSB7DQoJCQl0cnkgew0K
CQkJCWlEYXRhTWFwLnB1dChCWVRFUyArIGtleSwgbmV3IFN0cmluZygoYnl0ZVtdKSBvYmplY3Qs
IFVURl84KSk7DQoJCQl9IGNhdGNoIChVbnN1cHBvcnRlZEVuY29kaW5nRXhjZXB0aW9uIGUpIHsN
CgkJCX0NCgkJfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBOb2RlKSB7DQoJCQlpRGF0YU1h
cC5wdXQoTk9ERSArIGtleSwgbm9kZVRvRG9jdW1lbnQoKE5vZGUpIG9iamVjdCkpOw0KCQl9IGVs
c2UgaWYgKG9iamVjdCBpbnN0YW5jZW9mIElEYXRhKSB7DQoJCQlkdXBsaWNhdGVPYmplY3RzQXNE
b2NzSW1wbCgoSURhdGEpIG9iamVjdCk7DQoJCX0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2Yg
SURhdGFbXSkgew0KCQkJZm9yKElEYXRhIGlEYXRhT2ZBcnJheSA6IChJRGF0YVtdKSBvYmplY3Qp
IHsNCgkJCQlkdXBsaWNhdGVPYmplY3RzQXNEb2NzSW1wbChpRGF0YU9mQXJyYXkpOw0KCQkJfQ0K
CQl9DQoJfQ0KDQoJcmV0dXJuIGlEYXRhOw0KfQ0KDQpwdWJsaWMgc3RhdGljIElEYXRhIHJlcGxp
Y2F0ZU9iamVjdHNGcm9tRG9jc0ltcGwoSURhdGEgaURhdGEpIHsNCgkNCglJRGF0YU1hcCBpRGF0
YU1hcCA9IG5ldyBJRGF0YU1hcChpRGF0YSk7DQoJDQoJU2V0PFN0cmluZz4ga2V5U2V0ID0gaURh
dGFNYXAua2V5U2V0KCk7DQoJZm9yIChTdHJpbmcga2V5IDoga2V5U2V0KSB7DQoJCWlmIChrZXku
c3RhcnRzV2l0aChIQVNIVEFCTEUpKSB7DQoJCQlJRGF0YSBoYXNodGFibGVEb2MgPSAoSURhdGEp
IGlEYXRhTWFwLmdldChrZXkpOw0KCQkJSURhdGFNYXAgaGFzaHRhYmxlTWFwID0gbmV3IElEYXRh
TWFwKGhhc2h0YWJsZURvYyk7DQoJCQlJRGF0YVtdIGVudHJpZXMgPSBoYXNodGFibGVNYXAuZ2V0
QXNJRGF0YUFycmF5KEVOVFJJRVMpOw0KCQkJSGFzaHRhYmxlPFN0cmluZywgT2JqZWN0PiBoYXNo
dGFibGUgPSBuZXcgSGFzaHRhYmxlPFN0cmluZywgT2JqZWN0PihlbnRyaWVzLmxlbmd0aCk7DQoJ
CQlmb3IgKElEYXRhIGVudHJ5IDogZW50cmllcykgew0KCQkJCUlEYXRhTWFwIGVudHJ5TWFwID0g
bmV3IElEYXRhTWFwKGVudHJ5KTsNCgkJCQlTdHJpbmcgaGFzaEtleSA9IGVudHJ5TWFwLmdldEFz
U3RyaW5nKEtFWSk7DQoJCQkJT2JqZWN0IHZhbHVlT2JqZWN0ID0gZW50cnlNYXAuZ2V0KFZBTFVF
KTsNCgkJCQloYXNodGFibGUucHV0KGhhc2hLZXksIHZhbHVlT2JqZWN0KTsNCgkJCX0NCgkJCWlE
YXRhTWFwLnB1dChrZXkuc3Vic3RyaW5nKEhBU0hUQUJMRS5sZW5ndGgoKSksIGhhc2h0YWJsZSk7
DQoJCX0gZWxzZSBpZiAoa2V5LnN0YXJ0c1dpdGgoU1RSRUFNKSkgew0KCQkJU3RyaW5nIHN0cmVh
bVN0cmluZyA9IGlEYXRhTWFwLmdldEFzU3RyaW5nKGtleSk7DQoNCgkJCS8vIGlucHV0DQoJCQlJ
RGF0YSBpbnB1dCA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsNCgkJCUlEYXRhTWFwIGlucHV0TWFw
ID0gbmV3IElEYXRhTWFwKGlucHV0KTsNCgkJCWlucHV0TWFwLnB1dCgic3RyaW5nIiwgc3RyZWFt
U3RyaW5nKTsNCgkJCWlucHV0TWFwLnB1dCgiZW5jb2RpbmciLCBVVEZfOCk7DQoNCgkJCS8vIG91
dHB1dA0KCQkJSURhdGEgb3V0cHV0ID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOw0KCQkJdHJ5ew0K
CQkJCW91dHB1dCA9IFNlcnZpY2UuZG9JbnZva2UoInB1Yi5pbyIsICJzdHJpbmdUb1N0cmVhbSIs
IGlucHV0KTsNCgkJCX0gY2F0Y2goRXhjZXB0aW9uIGUpe30NCgkJCUlEYXRhTWFwIG91dHB1dE1h
cCA9IG5ldyBJRGF0YU1hcChvdXRwdXQpOw0KCQkJT2JqZWN0IGlucHV0U3RyZWFtID0gb3V0cHV0
TWFwLmdldCgiaW5wdXRTdHJlYW0iICk7DQoNCgkJCWlEYXRhTWFwLnB1dChrZXkuc3Vic3RyaW5n
KFNUUkVBTS5sZW5ndGgoKSksIGlucHV0U3RyZWFtKTsNCgkJfSBlbHNlIGlmIChrZXkuc3RhcnRz
V2l0aChBUlJBWUxJU1QpKSB7DQoJCQlJRGF0YSBhcnJheUxpc3REb2MgPSAoSURhdGEpIGlEYXRh
TWFwLmdldChrZXkpOw0KCQkJSURhdGFNYXAgYXJyYXlMaXN0TWFwID0gbmV3IElEYXRhTWFwKGFy
cmF5TGlzdERvYyk7DQoJCQlJRGF0YVtdIGVudHJpZXMgPSBhcnJheUxpc3RNYXAuZ2V0QXNJRGF0
YUFycmF5KEVOVFJJRVMpOw0KCQkJQXJyYXlMaXN0PElEYXRhPiBhcnJheUxpc3QgPSBuZXcgQXJy
YXlMaXN0PElEYXRhPihlbnRyaWVzLmxlbmd0aCk7DQoJCQlmb3IgKElEYXRhIGVudHJ5IDogZW50
cmllcykgew0KCQkJCWFycmF5TGlzdC5hZGQoZW50cnkpOw0KCQkJfQ0KCQkJaURhdGFNYXAucHV0
KGtleS5zdWJzdHJpbmcoQVJSQVlMSVNULmxlbmd0aCgpKSwgYXJyYXlMaXN0KTsNCgkJfSBlbHNl
IGlmIChrZXkuc3RhcnRzV2l0aChCWVRFUykpIHsNCgkJCVN0cmluZyBieXRlc1N0cmluZyA9IGlE
YXRhTWFwLmdldEFzU3RyaW5nKGtleSk7DQoJCQl0cnkgew0KCQkJCWlEYXRhTWFwLnB1dChrZXku
c3Vic3RyaW5nKEJZVEVTLmxlbmd0aCgpKSwgYnl0ZXNTdHJpbmcuZ2V0Qnl0ZXMoVVRGXzgpKTsN
CgkJCX0gY2F0Y2ggKFVuc3VwcG9ydGVkRW5jb2RpbmdFeGNlcHRpb24gZSkgew0KCQkJfQ0KCQl9
IGVsc2UgaWYgKGtleS5zdGFydHNXaXRoKE5PREUpKSB7DQoJCQlJRGF0YSBub2RlRG9jID0gaURh
dGFNYXAuZ2V0QXNJRGF0YShrZXkpOw0KCQkJeG1sU3RyaW5nVG9Ob2RlKGRvY3VtZW50VG9YbWxT
dHJpbmcobm9kZURvYykpOw0KCQkJaURhdGFNYXAucHV0KGtleS5zdWJzdHJpbmcoTk9ERS5sZW5n
dGgoKSksIHhtbFN0cmluZ1RvTm9kZShkb2N1bWVudFRvWG1sU3RyaW5nKG5vZGVEb2MpKSk7DQoJ
CX0gZWxzZSBpZiAoaURhdGFNYXAuZ2V0KGtleSkgaW5zdGFuY2VvZiBJRGF0YSkgew0KCQkJcmVw
bGljYXRlT2JqZWN0c0Zyb21Eb2NzSW1wbCgoSURhdGEpIGlEYXRhTWFwLmdldChrZXkpKTsNCgkJ
fSBlbHNlIGlmIChpRGF0YU1hcC5nZXQoa2V5KSBpbnN0YW5jZW9mIElEYXRhW10pIHsNCgkJCWZv
cihJRGF0YSBpRGF0YU9mQXJyYXkgOiAoSURhdGFbXSkgaURhdGFNYXAuZ2V0KGtleSkpIHsNCgkJ
CQlyZXBsaWNhdGVPYmplY3RzRnJvbURvY3NJbXBsKGlEYXRhT2ZBcnJheSk7DQoJCQl9DQoJCX0N
Cgl9DQoNCglyZXR1cm4gaURhdGE7DQp9DQoNCnByaXZhdGUgc3RhdGljIElEYXRhIG5vZGVUb0Rv
Y3VtZW50KE5vZGUgbm9kZSkgew0KDQoJLy8gaW5wdXQNCglJRGF0YSBpbnB1dCA9IElEYXRhRmFj
dG9yeS5jcmVhdGUoKTsNCglJRGF0YUN1cnNvciBpbnB1dEN1cnNvciA9IGlucHV0LmdldEN1cnNv
cigpOw0KCUlEYXRhVXRpbC5wdXQoIGlucHV0Q3Vyc29yLCAibm9kZSIsIG5vZGUgKTsNCg0KCS8v
IG91dHB1dA0KCUlEYXRhIAlvdXRwdXQgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7DQoJdHJ5ew0K
CQlvdXRwdXQgPSBTZXJ2aWNlLmRvSW52b2tlKCAicHViLnhtbCIsICJ4bWxOb2RlVG9Eb2N1bWVu
dCIsIGlucHV0ICk7DQoJfWNhdGNoKCBFeGNlcHRpb24gZSl7fQ0KCUlEYXRhQ3Vyc29yIG91dHB1
dEN1cnNvciA9IG91dHB1dC5nZXRDdXJzb3IoKTsNCg0KCS8vIGRvY3VtZW50DQoJSURhdGEJZG9j
dW1lbnQgPSBJRGF0YVV0aWwuZ2V0SURhdGEoIG91dHB1dEN1cnNvciwgImRvY3VtZW50IiApOw0K
CW91dHB1dEN1cnNvci5kZXN0cm95KCk7DQoJDQoJcmV0dXJuIGRvY3VtZW50Ow0KDQp9DQoNCnBy
aXZhdGUgc3RhdGljIFN0cmluZyBkb2N1bWVudFRvWG1sU3RyaW5nKElEYXRhIGlkYXRhKSB7DQoN
CgkvLyBpbnB1dA0KCUlEYXRhIGlucHV0ID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOw0KCUlEYXRh
Q3Vyc29yIGlucHV0Q3Vyc29yID0gaW5wdXQuZ2V0Q3Vyc29yKCk7DQoNCgkvLyBkb2N1bWVudA0K
CUlEYXRhVXRpbC5wdXQoIGlucHV0Q3Vyc29yLCAiZG9jdW1lbnQiLCBpZGF0YSApOw0KDQoJLy8g
b3V0cHV0DQoJSURhdGEgCW91dHB1dCA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsNCgl0cnl7DQoJ
CW91dHB1dCA9IFNlcnZpY2UuZG9JbnZva2UoICJwdWIueG1sIiwgImRvY3VtZW50VG9YTUxTdHJp
bmciLCBpbnB1dCApOw0KCX1jYXRjaCggRXhjZXB0aW9uIGUpe30NCglJRGF0YUN1cnNvciBvdXRw
dXRDdXJzb3IgPSBvdXRwdXQuZ2V0Q3Vyc29yKCk7DQoJCVN0cmluZwl4bWxkYXRhID0gSURhdGFV
dGlsLmdldFN0cmluZyggb3V0cHV0Q3Vyc29yLCAieG1sZGF0YSIgKTsNCglvdXRwdXRDdXJzb3Iu
ZGVzdHJveSgpOw0KDQoJcmV0dXJuIHhtbGRhdGE7DQp9DQoNCnByaXZhdGUgc3RhdGljIE5vZGUg
eG1sU3RyaW5nVG9Ob2RlKFN0cmluZyB4bWxTdHJpbmcpIHsNCg0KCS8vIGlucHV0DQoJSURhdGEg
aW5wdXQgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7DQoJSURhdGFDdXJzb3IgaW5wdXRDdXJzb3Ig
PSBpbnB1dC5nZXRDdXJzb3IoKTsNCglJRGF0YVV0aWwucHV0KCBpbnB1dEN1cnNvciwgInhtbGRh
dGEiLCB4bWxTdHJpbmcgKTsNCg0KCS8vIG91dHB1dA0KCUlEYXRhIAlvdXRwdXQgPSBJRGF0YUZh
Y3RvcnkuY3JlYXRlKCk7DQoJdHJ5ew0KCQlvdXRwdXQgPSBTZXJ2aWNlLmRvSW52b2tlKCAicHVi
LnhtbCIsICJ4bWxTdHJpbmdUb1hNTE5vZGUiLCBpbnB1dCApOw0KCX1jYXRjaCggRXhjZXB0aW9u
IGUpe30NCglJRGF0YUN1cnNvciBvdXRwdXRDdXJzb3IgPSBvdXRwdXQuZ2V0Q3Vyc29yKCk7DQoJ
CU9iamVjdAlub2RlID0gSURhdGFVdGlsLmdldCggb3V0cHV0Q3Vyc29yLCAibm9kZSIgKTsNCglv
dXRwdXRDdXJzb3IuZGVzdHJveSgpOw0KCQ0KCXJldHVybiAoTm9kZSkgbm9kZTsNCn0NCg0KcHJp
dmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIExPR19GVU5DVElPTiA9ICJXeFJlc2lsaWVuY2UiOw0K
cHJpdmF0ZSBzdGF0aWMgdm9pZCBkZWJ1Z0xvZ0Vycm9yKFN0cmluZyBtZXNzYWdlKSB7DQogICAg
Sm91cm5hbExvZ2dlci5sb2coNCwgIEpvdXJuYWxMb2dnZXIuRkFDX0ZMT1dfU1ZDLCBKb3VybmFs
TG9nZ2VyLkVSUk9SLCBMT0dfRlVOQ1RJT04sIG1lc3NhZ2UpOw0KfQ0KDQpwcml2YXRlIHN0YXRp
YyB2b2lkIGRlYnVnTG9nSW5mbyhTdHJpbmcgbWVzc2FnZSkgew0KICAgIEpvdXJuYWxMb2dnZXIu
bG9nKDQsICBKb3VybmFsTG9nZ2VyLkZBQ19GTE9XX1NWQywgSm91cm5hbExvZ2dlci5JTkZPLCBM
T0dfRlVOQ1RJT04sIG1lc3NhZ2UpOw0KfQ0KDQoJDQoJDQoJDQo=</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>com.wm.util.coder.IDataXMLCoder</value>
    <value>com.wm.app.b2b.server.InvokeState</value>
    <value>java.io.BufferedOutputStream</value>
    <value>java.io.IOException</value>
    <value>java.io.InputStream</value>
    <value>java.io.OutputStream</value>
    <value>java.io.UnsupportedEncodingException</value>
    <value>java.nio.file.Files</value>
    <value>java.nio.file.Path</value>
    <value>java.nio.file.Paths</value>
    <value>java.time.Instant</value>
    <value>java.time.LocalDateTime</value>
    <value>java.time.ZoneId</value>
    <value>java.time.format.DateTimeFormatter</value>
    <value>java.util.ArrayList</value>
    <value>java.util.Arrays</value>
    <value>java.util.Enumeration</value>
    <value>java.util.HashMap</value>
    <value>java.util.Hashtable</value>
    <value>java.util.List</value>
    <value>java.util.Map</value>
    <value>java.util.Set</value>
    <value>java.util.Stack</value>
    <value>javax.print.attribute.standard.Severity</value>
    <value>com.wm.lang.xml.Node</value>
    <value>com.softwareag.util.IDataMap</value>
  </array>
</Values>
