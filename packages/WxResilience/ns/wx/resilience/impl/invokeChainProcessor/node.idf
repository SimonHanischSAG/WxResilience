<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">CnB1YmxpYyBzdGF0aWMgV3hSZXNpbGllbmNlUHJvY2Vzc29yIHByb2Nlc3NvciA9IG51bGw7Cgpw
dWJsaWMgc3RhdGljIGNsYXNzIFd4UmVzaWxpZW5jZVByb2Nlc3NvciBpbXBsZW1lbnRzIEludm9r
ZUNoYWluUHJvY2Vzc29yIHsKCglwcml2YXRlIFN0cmluZ1tdIGludm9rZUNoYWluQmxhY2tsaXN0
OwoJCglwdWJsaWMgV3hSZXNpbGllbmNlUHJvY2Vzc29yKFN0cmluZ1tdIGludm9rZUNoYWluQmxh
Y2tsaXN0KSB7CgkJaWYgKGludm9rZUNoYWluQmxhY2tsaXN0ICE9IG51bGwpIHsKCQkJdGhpcy5p
bnZva2VDaGFpbkJsYWNrbGlzdCA9IGludm9rZUNoYWluQmxhY2tsaXN0OwoJCX0gZWxzZSB7CgkJ
CXRoaXMuaW52b2tlQ2hhaW5CbGFja2xpc3QgPSBuZXcgU3RyaW5nWzBdOwoJCX0KCX0KCglAT3Zl
cnJpZGUKCXB1YmxpYyB2b2lkIHByb2Nlc3MoSXRlcmF0b3IgY2hhaW4sIEJhc2VTZXJ2aWNlIGJh
c2VTZXJ2aWNlLCBJRGF0YSBwaXBlbGluZSwgU2VydmljZVN0YXR1cyBzdGF0dXMpCgkJCXRocm93
cyBTZXJ2ZXJFeGNlcHRpb24gewoKCQlTdHJpbmcgYmFzZVNlcnZpY2VOYW1lID0gYmFzZVNlcnZp
Y2UuZ2V0TlNOYW1lKCkuZ2V0RnVsbE5hbWUoKTsKCQlJRGF0YU1hcCBwaXBlTWFwID0gbmV3IElE
YXRhTWFwKHBpcGVsaW5lKTsKCQkKCQlib29sZWFuIHd4UmVzaWxpZW5jZVNlcnZpY2VSZWRpcmVj
dGVkID0gcGlwZU1hcC5nZXRBc0Jvb2xlYW4oUkVESVJFQ1RFRCk7CgkJYm9vbGVhbiB3eFJlc2ls
aWVuY2VTZXJ2aWNlV3JhcHBlZCA9IHBpcGVNYXAuZ2V0QXNCb29sZWFuKFdSQVBQRUQpOwoJCWJv
b2xlYW4gcmVkaXJlY3RlZCA9IGZhbHNlOwoJCWJvb2xlYW4gd3JhcHBlZCA9IGZhbHNlOwoKCQlp
ZiAoIXd4UmVzaWxpZW5jZVNlcnZpY2VXcmFwcGVkKSB7CgkJCS8vIEF2b2lkIHJlZGlyZWN0aW5n
IGZvciBzZXJ2aWNlcyB3aGVyZSB0aGUgd3JhcHBlciB3YXMgYWxyZWFkeSBpbnZva2VkIG1hbnVh
bGx5CgkJCWlmICgid3gucmVzaWxpZW5jZS5wdWIuaHR0cDpodHRwIi5lcXVhbHMoYmFzZVNlcnZp
Y2VOYW1lKSkgewoJCQkJcGlwZU1hcC5wdXQoV1JBUFBFRCwgdHJ1ZSk7CgkJCQl3cmFwcGVkID0g
dHJ1ZTsKCQkJfSBlbHNlIGlmICgid3gucmVzaWxpZW5jZS5wdWIuaHR0cDpodHRwIi5lcXVhbHMo
YmFzZVNlcnZpY2VOYW1lKSkgewoJCQkJcGlwZU1hcC5wdXQoV1JBUFBFRCwgdHJ1ZSk7CgkJCQl3
cmFwcGVkID0gdHJ1ZTsKCQkJfSBlbHNlIGlmICgid3gucmVzaWxpZW5jZS5wdWIuam1zOnNlbmQi
LmVxdWFscyhiYXNlU2VydmljZU5hbWUpKSB7CgkJCQlwaXBlTWFwLnB1dChXUkFQUEVELCB0cnVl
KTsKCQkJCXdyYXBwZWQgPSB0cnVlOwoJCQl9IGVsc2UgaWYgKCJ3eC5yZXNpbGllbmNlLnB1Yi5q
bXM6c2VuZFd4TWVzc2FnZSIuZXF1YWxzKGJhc2VTZXJ2aWNlTmFtZSkpIHsKCQkJCXBpcGVNYXAu
cHV0KFdSQVBQRUQsIHRydWUpOwoJCQkJd3JhcHBlZCA9IHRydWU7CgkJCX0gZWxzZSBpZiAoInd4
LnJlc2lsaWVuY2UucHViLmptczpzZW5kV3hNZXNzYWdlQXNKc29uIi5lcXVhbHMoYmFzZVNlcnZp
Y2VOYW1lKSkgewoJCQkJcGlwZU1hcC5wdXQoV1JBUFBFRCwgdHJ1ZSk7CgkJCQl3cmFwcGVkID0g
dHJ1ZTsKCQkJfSBlbHNlIHsKCQkJCS8vIEF2b2lkIGVuZGxlc3MgcmVkaXJlY3RpbmcKCQkJCWlm
ICghd3hSZXNpbGllbmNlU2VydmljZVJlZGlyZWN0ZWQpIHsKCQkJCQlpZiAoInB1Yi5qbXM6c2Vu
ZCIuZXF1YWxzKGJhc2VTZXJ2aWNlTmFtZSkpIHsKCQkJCQkJLy9sb2dEZWJ1ZygicHViLmptczpz
ZW5kIHJlZGlyZWN0ZWQiKTsKCQkJCQkJcGlwZU1hcC5wdXQoUkVESVJFQ1RFRCwgdHJ1ZSk7CgkJ
CQkJCWV4ZWN1dGVTZXJ2aWNlKCJ3eC5yZXNpbGllbmNlLnB1Yi5qbXMiLCAic2VuZCIsIHBpcGVs
aW5lLCBiYXNlU2VydmljZU5hbWUpOwoJCQkJCQlwaXBlTWFwLnJlbW92ZShSRURJUkVDVEVEKTsK
CQkJCQkJcmVkaXJlY3RlZCA9IHRydWU7CgkJCQkJfSBlbHNlIGlmICgicHViLmNsaWVudDpodHRw
Ii5lcXVhbHMoYmFzZVNlcnZpY2VOYW1lKSkgewoJCQkJCQkvL2xvZ0RlYnVnKCJ3eC5yZXNpbGll
bmNlLnB1Yi5odHRwIik7CgkJCQkJCXBpcGVNYXAucHV0KFJFRElSRUNURUQsIHRydWUpOwoJCQkJ
CQlleGVjdXRlU2VydmljZSgid3gucmVzaWxpZW5jZS5wdWIuaHR0cCIsICJodHRwIiwgcGlwZWxp
bmUsIGJhc2VTZXJ2aWNlTmFtZSk7CgkJCQkJCXBpcGVNYXAucmVtb3ZlKFJFRElSRUNURUQpOwoJ
CQkJCQlyZWRpcmVjdGVkID0gdHJ1ZTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkJaWYgKCFyZWRp
cmVjdGVkKSB7CgkJCWJvb2xlYW4gaXNUb3AgPSBzdGF0dXMuaXNUb3BTZXJ2aWNlKCk7CQkKCQkJ
Ym9vbGVhbiBleGVjdXRlV3hSZXNpbGllbmNlU2VydmljZXMgPSBmYWxzZTsKCQkJaWYgKGlzVG9w
KSB7CgkJCQlleGVjdXRlV3hSZXNpbGllbmNlU2VydmljZXMgPSB0cnVlOwoJCQkJZm9yIChTdHJp
bmcgZW50cnkgOiBpbnZva2VDaGFpbkJsYWNrbGlzdCkgewoJCQkJCWlmIChiYXNlU2VydmljZU5h
bWUuc3RhcnRzV2l0aChlbnRyeSkpIHsKCQkJCQkJZXhlY3V0ZVd4UmVzaWxpZW5jZVNlcnZpY2Vz
ID0gZmFsc2U7CgkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCQkJfQoJCQkvL2lmIChpc1RvcCB8
fCBleGVjdXRlV3hSZXNpbGllbmNlU2VydmljZXMpCgkJCQkvL2xvZ0RlYnVnKGJhc2VTZXJ2aWNl
TmFtZSArICI6ICIgKyBpc1RvcCArICIsIiArIGV4ZWN1dGVXeFJlc2lsaWVuY2VTZXJ2aWNlcyk7
CgkJCS8vIHdlIGhhdmUgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHNlcnZjaWUgaW52b2NhdGlvbiBj
aGFpbiBpcyBub3QgY3V0CgkJCWlmIChjaGFpbi5oYXNOZXh0KCkpIHsKCQkJCXRyeSB7CgkJCQkJ
aWYgKGV4ZWN1dGVXeFJlc2lsaWVuY2VTZXJ2aWNlcykgewoJCQkJCQl0cnkgewoJCQkJCQkJLy9s
b2dEZWJ1ZygicGlwZTE6ICIgKyBwaXBlbGluZS5nZXRDbGFzcygpLmhhc2hDb2RlKCkpOwoJCQkJ
CQkJZXhlY3V0ZVNlcnZpY2UoInd4LnJlc2lsaWVuY2UuaW1wbC5pbnZva2VDaGFpblByb2Nlc3Nv
ciIsICJwcmVQcm9jZXNzRm9yVG9wTGV2ZWxTZXJ2aWNlIiwgcGlwZWxpbmUsIGJhc2VTZXJ2aWNl
TmFtZSk7CgkJCQkJCQkvL2xvZ0RlYnVnKCJwaXBlMjogIiArIHBpcGVsaW5lLmdldENsYXNzKCku
aGFzaENvZGUoKSk7CgkJCQkJCQkvL3BpcGVNYXAgPSBuZXcgSURhdGFNYXAocGlwZWxpbmUpOwoJ
CQkJCQl9IGNhdGNoKEV4Y2VwdGlvbiBlKSB7CgkJCQkJCQlsb2dFcnJvcigiRXJyb3IgaW4gcHJl
UHJvY2Vzc0ZvclRvcExldmVsU2VydmljZTogIiArIGUpOwoJCQkJCQl9CgkJCQkJfQoJCgkJCQkJ
Ly9sb2dEZWJ1ZygiQmVmb3JlIG9yaWdpbmFsIFNlcnZpY2UiKTsKCQkJCQkKCQkJCQkvL2xvZ0Rl
YnVnKCJwaXBlMzogIiArIHBpcGVsaW5lLmdldENsYXNzKCkuaGFzaENvZGUoKSk7CgkJCQkJKChJ
bnZva2VDaGFpblByb2Nlc3NvcikgY2hhaW4ubmV4dCgpKS5wcm9jZXNzKGNoYWluLCBiYXNlU2Vy
dmljZSwgcGlwZWxpbmUsIHN0YXR1cyk7CgkJCQkJLy9sb2dEZWJ1ZygicGlwZTQ6ICIgKyBwaXBl
bGluZS5nZXRDbGFzcygpLmhhc2hDb2RlKCkpOwoJCQkJCQoJCQkJCS8vbG9nRGVidWcoIkFmdGVy
IG9yaWdpbmFsIFNlcnZpY2UiKTsKCQkJCQkKCQkJCX0gY2F0Y2ggKEV4Y2VwdGlvbiBvcmlnaW5h
bEV4Y2VwdGlvbikgewoJCQkJCS8vcGlwZU1hcCA9IG5ldyBJRGF0YU1hcChwaXBlbGluZSk7CgkJ
CQkJaWYgKGV4ZWN1dGVXeFJlc2lsaWVuY2VTZXJ2aWNlcykgewoJCQkJCQlib29sZWFuIHd4UmVz
aWxpZW5jZVBvc3RQcm9jZXNzRXhlY3V0ZWQgPSBwaXBlTWFwLmdldEFzQm9vbGVhbihQT1NUUFJP
Q0VTU19FWEVDVVRFRCk7CgkJCQkJCS8vbG9nRGVidWcoInd4UmVzaWxpZW5jZVBvc3RQcm9jZXNz
RXhlY3V0ZWQ6ICIgKyB3eFJlc2lsaWVuY2VQb3N0UHJvY2Vzc0V4ZWN1dGVkKTsKCQkJCQkJaWYg
KCF3eFJlc2lsaWVuY2VQb3N0UHJvY2Vzc0V4ZWN1dGVkKSB7CgkJCQkJCQlsb2dFcnJvcigiSGFu
ZGxlIGVycm9yIik7CgkJCQkJCQkJCQoJCQkJCQkJSURhdGEgbGFzdEVycm9yID0gbnVsbDsKCQkJ
CQkJCXRyeSB7CgkJCQkJCQkJZXhlY3V0ZVNlcnZpY2UoInB1Yi5mbG93IiwgImdldExhc3RFcnJv
ciIsIHBpcGVsaW5lLCBiYXNlU2VydmljZU5hbWUpOwkJCQkJCQoJCQkJCQkJCS8vcGlwZU1hcCA9
IG5ldyBJRGF0YU1hcChwaXBlbGluZSk7CgkJCQkJCQkJCgkJCQkJCQkJbGFzdEVycm9yID0gcGlw
ZU1hcC5nZXRBc0lEYXRhKCJsYXN0RXJyb3IiKTsKCQkJCQkJCQlpZiAobGFzdEVycm9yID09IG51
bGwpIHsKCQkJCQkJCQkJbGFzdEVycm9yID0gY3JlYXRlTGFzdEVycm9yRnJvbUV4Y2VwdGlvbihv
cmlnaW5hbEV4Y2VwdGlvbik7CgkJCQkJCQkJCXBpcGVNYXAucHV0KCJsYXN0RXJyb3IiLCBsYXN0
RXJyb3IpOwoJCQkJCQkJCX0KCQkJCQkJCX0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CgkJCQkJCQkJ
bG9nRXJyb3IoIkNvdWxkIG5vdCBjYWxsIGdldExhc3RFcnJvciIpOwoJCQkJCQkJCWxhc3RFcnJv
ciA9IGNyZWF0ZUxhc3RFcnJvckZyb21FeGNlcHRpb24ob3JpZ2luYWxFeGNlcHRpb24pOwoJCQkJ
CQkJCXBpcGVNYXAucHV0KCJsYXN0RXJyb3IiLCBsYXN0RXJyb3IpOwoJCQkJCQkJfQoJCQoJCQkJ
CQkJdHJ5IHsKCQkJCQkJCQlleGVjdXRlU2VydmljZSgid3gucmVzaWxpZW5jZS5wdWIucmVzaWxp
ZW5jZSIsICJoYW5kbGVFcnJvciIsIHBpcGVsaW5lLCBiYXNlU2VydmljZU5hbWUpOwoJCQkJCQkJ
fSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsKCQkJCQkJCQlsb2dFcnJvcigiRXJyb3IgaW4gaGFuZGxl
RXJyb3I6ICIgKyBlKTsKCQkJCQkJCX0KCQkJCQkJfSBlbHNlIHsKCQkJCQkJCS8vIEVycm9yIGFs
cmVhZHkgaGFuZGxlZCBpbiBGbG93CgkJCQkJCQl0aHJvdyBvcmlnaW5hbEV4Y2VwdGlvbjsKCQkJ
CQkJfSAKCQkJCQl9IGVsc2UgewoJCQkJCQkvL2xvZ0RlYnVnKCJleGVjdXRlIik7CgkJCQkJCXRo
cm93IG9yaWdpbmFsRXhjZXB0aW9uOwoJCQkJCX0KCQkJCQoJCQkJfSBmaW5hbGx5IHsKCQkJCQkv
L3BpcGVNYXAgPSBuZXcgSURhdGFNYXAocGlwZWxpbmUpOwoJCQkJCWJvb2xlYW4gd3hSZXNpbGll
bmNlUG9zdFByb2Nlc3NFeGVjdXRlZCA9IHBpcGVNYXAuZ2V0QXNCb29sZWFuKFBPU1RQUk9DRVNT
X0VYRUNVVEVEKTsKCQkJCQlpZiAoIXd4UmVzaWxpZW5jZVBvc3RQcm9jZXNzRXhlY3V0ZWQpIHsK
CQkJCQkJaWYgKGV4ZWN1dGVXeFJlc2lsaWVuY2VTZXJ2aWNlcykgewoJCQkJCQkvL2xvZ0RlYnVn
KGJhc2VTZXJ2aWNlTmFtZSArICIgd3hSZXNpbGllbmNlUG9zdFByb2Nlc3NFeGVjdXRlZDogIiAr
IHd4UmVzaWxpZW5jZVBvc3RQcm9jZXNzRXhlY3V0ZWQpOwoJCQkJCQkJLy9sb2dEZWJ1ZygicGlw
ZTU6ICIgKyBwaXBlbGluZS5nZXRDbGFzcygpLmhhc2hDb2RlKCkpOwoJCQkJCQkJZXhlY3V0ZVNl
cnZpY2UoInd4LnJlc2lsaWVuY2UucHViLnJlc2lsaWVuY2UiLCAicG9zdFByb2Nlc3NGb3JUb3BM
ZXZlbFNlcnZpY2UiLCBwaXBlbGluZSwgYmFzZVNlcnZpY2VOYW1lKTsKCQkJCQkJCS8vbG9nRGVi
dWcoInBpcGU2OiAiICsgcGlwZWxpbmUuZ2V0Q2xhc3MoKS5oYXNoQ29kZSgpKTsKCQkJCQkJCS8v
cGlwZU1hcCA9IG5ldyBJRGF0YU1hcChwaXBlbGluZSk7CgkJCQkJCX0KCQkJCQkJcGlwZU1hcC5y
ZW1vdmUoUE9TVFBST0NFU1NfRVhFQ1VURUQpOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCQlpZiAo
d3JhcHBlZCkgewoJCQlwaXBlTWFwLnJlbW92ZShXUkFQUEVEKTsKCQl9Cgl9CgoJcHJpdmF0ZSBJ
RGF0YSBjcmVhdGVMYXN0RXJyb3JGcm9tRXhjZXB0aW9uKEV4Y2VwdGlvbiBvcmlnaW5hbEV4Y2Vw
dGlvbikgewoJCUlEYXRhIGxhc3RFcnJvcjsKCQlsYXN0RXJyb3IgPSBJRGF0YUZhY3RvcnkuY3Jl
YXRlKCk7CgkJSURhdGFNYXAgbGFzdEVycm9yTWFwID0gbmV3IElEYXRhTWFwKGxhc3RFcnJvcik7
CgkJVGhyb3dhYmxlIGNhdXNlRXhjZXB0aW9uOwoJCWlmIChvcmlnaW5hbEV4Y2VwdGlvbi5nZXRD
YXVzZSgpICE9IG51bGwpIHsKCQkJY2F1c2VFeGNlcHRpb24gPSBvcmlnaW5hbEV4Y2VwdGlvbi5n
ZXRDYXVzZSgpOwoJCX0gZWxzZSB7CgkJCWNhdXNlRXhjZXB0aW9uID0gb3JpZ2luYWxFeGNlcHRp
b247CgkJfQoJCWxhc3RFcnJvck1hcC5wdXQoImVycm9yIiwgY2F1c2VFeGNlcHRpb24uZ2V0TG9j
YWxpemVkTWVzc2FnZSgpKTsKCQlsYXN0RXJyb3JNYXAucHV0KCJlcnJvclR5cGUiLCBjYXVzZUV4
Y2VwdGlvbi5nZXRDbGFzcygpLmdldENhbm9uaWNhbE5hbWUoKSk7CgkJcmV0dXJuIGxhc3RFcnJv
cjsKCX0KfQoKcHJpdmF0ZSBzdGF0aWMgSURhdGEgZXhlY3V0ZVNlcnZpY2UoU3RyaW5nIGlmYywg
U3RyaW5nIHN2YywgSURhdGEgcGlwZWxpbmUsIFN0cmluZyBjdXJyZW50U2VydmljZU5hbWUpIHRo
cm93cyBTZXJ2ZXJFeGNlcHRpb24sIElTUnVudGltZUV4Y2VwdGlvbiB7CgkvLyBBdm9pZCBlbmRs
ZXNzIGxvb3AgaW4gY2FzZSBvZiBicm9rZW4gZXJyb25lb3VzIHNlcnZpY2U6CglpZiAoIShpZmMg
KyAiOiIgKyBzdmMpLmVxdWFscyhjdXJyZW50U2VydmljZU5hbWUpKSB7CgkJdHJ5IHsKCQkJcmV0
dXJuIFNlcnZpY2UuZG9JbnZva2UoaWZjLCBzdmMsIHBpcGVsaW5lKTsKCQl9IGNhdGNoIChJU1J1
bnRpbWVFeGNlcHRpb24gZSkgewoJCQl0aHJvdyBlOwoJCX0gY2F0Y2ggKFNlcnZlckV4Y2VwdGlv
biBlKSB7CgkJCXRocm93IGU7CgkJfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsKCQkJdGhyb3cgbmV3
IFNlcnZpY2VFeGNlcHRpb24oZSk7CgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gcGlwZWxpbmU7Cgl9
Cn0KCnByaXZhdGUgc3RhdGljIHZvaWQgbG9nRGVidWcoU3RyaW5nIG1lc3NhZ2UpIHsKCUpvdXJu
YWxMb2dnZXIubG9nKDQsIEpvdXJuYWxMb2dnZXIuRkFDX0ZMT1dfU1ZDLCBKb3VybmFsTG9nZ2Vy
LklORk8sICJXeFJlc2lsaWVuY2VQcm9jZXNzb3IiLCBtZXNzYWdlKTsKfQoKcHJpdmF0ZSBzdGF0
aWMgdm9pZCBsb2dJbmZvKFN0cmluZyBtZXNzYWdlKSB7CglKb3VybmFsTG9nZ2VyLmxvZyg0LCBK
b3VybmFsTG9nZ2VyLkZBQ19GTE9XX1NWQywgSm91cm5hbExvZ2dlci5JTkZPLCAiV3hSZXNpbGll
bmNlUHJvY2Vzc29yIiwgbWVzc2FnZSk7Cn0KCnByaXZhdGUgc3RhdGljIHZvaWQgbG9nRXJyb3Io
U3RyaW5nIG1lc3NhZ2UpIHsKCUpvdXJuYWxMb2dnZXIubG9nKDQsIEpvdXJuYWxMb2dnZXIuRkFD
X0ZMT1dfU1ZDLCBKb3VybmFsTG9nZ2VyLkVSUk9SLCAiV3hSZXNpbGllbmNlUHJvY2Vzc29yIiwg
bWVzc2FnZSk7Cn0KCgkKcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFJFRElSRUNURUQgPSAi
QFd4UmVzaWxpZW5jZS5zZXJ2aWNlLnJlZGlyZWN0ZWRAIjsKcHJpdmF0ZSBzdGF0aWMgZmluYWwg
U3RyaW5nIFdSQVBQRUQgPSAiQFd4UmVzaWxpZW5jZS5zZXJ2aWNlLndyYXBwZWRAIjsKcHJpdmF0
ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFBPU1RQUk9DRVNTX0VYRUNVVEVEID0gIkBXeFJlc2lsaWVu
Y2UucG9zdFByb2Nlc3MuZXhlY3V0ZWRAIjsKCgkKCQ==</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>com.wm.util.JournalLogger</value>
    <value>com.wm.util.ServerException</value>
    <value>com.wm.app.b2b.server.BaseService</value>
    <value>com.wm.app.b2b.server.ISRuntimeException</value>
    <value>com.wm.app.b2b.server.invoke.InvokeChainProcessor</value>
    <value>com.wm.app.b2b.server.invoke.InvokeManager</value>
    <value>com.wm.app.b2b.server.invoke.ServiceStatus</value>
    <value>java.util.Arrays</value>
    <value>java.util.Iterator</value>
    <value>com.softwareag.util.IDataMap</value>
  </array>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
</Values>
