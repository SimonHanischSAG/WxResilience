<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">CnB1YmxpYyBzdGF0aWMgV3hSZXNpbGllbmNlUHJvY2Vzc29yIHByb2Nlc3NvciA9IG51bGw7Cgpw
dWJsaWMgc3RhdGljIGNsYXNzIFd4UmVzaWxpZW5jZVByb2Nlc3NvciBpbXBsZW1lbnRzIEludm9r
ZUNoYWluUHJvY2Vzc29yIHsKCglwcml2YXRlIFN0cmluZ1tdIGludm9rZUNoYWluQmxhY2tsaXN0
OwoJCglwdWJsaWMgV3hSZXNpbGllbmNlUHJvY2Vzc29yKFN0cmluZ1tdIGludm9rZUNoYWluQmxh
Y2tsaXN0KSB7CgkJaWYgKGludm9rZUNoYWluQmxhY2tsaXN0ICE9IG51bGwpIHsKCQkJdGhpcy5p
bnZva2VDaGFpbkJsYWNrbGlzdCA9IGludm9rZUNoYWluQmxhY2tsaXN0OwoJCX0gZWxzZSB7CgkJ
CXRoaXMuaW52b2tlQ2hhaW5CbGFja2xpc3QgPSBuZXcgU3RyaW5nWzBdOwoJCX0KCX0KCglAT3Zl
cnJpZGUKCXB1YmxpYyB2b2lkIHByb2Nlc3MoSXRlcmF0b3IgY2hhaW4sIEJhc2VTZXJ2aWNlIGJh
c2VTZXJ2aWNlLCBJRGF0YSBwaXBlbGluZSwgU2VydmljZVN0YXR1cyBzdGF0dXMpCgkJCXRocm93
cyBTZXJ2ZXJFeGNlcHRpb24gewoKCQlTdHJpbmcgYmFzZVNlcnZpY2VOYW1lID0gYmFzZVNlcnZp
Y2UuZ2V0TlNOYW1lKCkuZ2V0RnVsbE5hbWUoKTsKCQlJRGF0YU1hcCBwaXBlTWFwID0gbmV3IElE
YXRhTWFwKHBpcGVsaW5lKTsKCQkKCQlib29sZWFuIHd4UmVzaWxpZW5jZVNlcnZpY2VSZWRpcmVj
dGVkID0gcGlwZU1hcC5nZXRBc0Jvb2xlYW4oUkVESVJFQ1RFRCk7CgkJYm9vbGVhbiByZWRpcmVj
dGVkID0gZmFsc2U7CgkJaWYgKCF3eFJlc2lsaWVuY2VTZXJ2aWNlUmVkaXJlY3RlZCkgewoJCQlp
ZiAoInB1Yi5qbXM6c2VuZCIuZXF1YWxzKGJhc2VTZXJ2aWNlTmFtZSkpIHsKCQkJCWxvZ0RlYnVn
KCJwdWIuam1zOnNlbmQgcmVkaXJlY3RlZCIpOwoJCQkJcGlwZU1hcC5wdXQoUkVESVJFQ1RFRCwg
dHJ1ZSk7CgkJCQlleGVjdXRlU2VydmljZSgid3gucmVzaWxpZW5jZS5wdWIuam1zIiwgInNlbmQi
LCBwaXBlbGluZSwgYmFzZVNlcnZpY2VOYW1lKTsKCQkJCXBpcGVNYXAucmVtb3ZlKFJFRElSRUNU
RUQpOwoJCQkJcmVkaXJlY3RlZCA9IHRydWU7CgkJCX0gZWxzZSBpZiAoInB1Yi5jbGllbnQ6aHR0
cCIuZXF1YWxzKGJhc2VTZXJ2aWNlTmFtZSkpIHsKCQkJCWxvZ0RlYnVnKCJ3eC5yZXNpbGllbmNl
LnB1Yi5odHRwIik7CgkJCQlwaXBlTWFwLnB1dChSRURJUkVDVEVELCB0cnVlKTsKCQkJCWV4ZWN1
dGVTZXJ2aWNlKCJ3eC5yZXNpbGllbmNlLnB1Yi5odHRwIiwgImh0dHAiLCBwaXBlbGluZSwgYmFz
ZVNlcnZpY2VOYW1lKTsKCQkJCXBpcGVNYXAucmVtb3ZlKFJFRElSRUNURUQpOwoJCQkJcmVkaXJl
Y3RlZCA9IHRydWU7CgkJCX0gCgkJfQoJCWlmICghcmVkaXJlY3RlZCkgewoJCQlib29sZWFuIGlz
VG9wID0gc3RhdHVzLmlzVG9wU2VydmljZSgpOwkJCgkJCWJvb2xlYW4gZXhlY3V0ZVd4UmVzaWxp
ZW5jZVNlcnZpY2VzID0gZmFsc2U7CgkJCWlmIChpc1RvcCkgewoJCQkJZXhlY3V0ZVd4UmVzaWxp
ZW5jZVNlcnZpY2VzID0gdHJ1ZTsKCQkJCWZvciAoU3RyaW5nIGVudHJ5IDogaW52b2tlQ2hhaW5C
bGFja2xpc3QpIHsKCQkJCQlpZiAoYmFzZVNlcnZpY2VOYW1lLnN0YXJ0c1dpdGgoZW50cnkpKSB7
CgkJCQkJCWV4ZWN1dGVXeFJlc2lsaWVuY2VTZXJ2aWNlcyA9IGZhbHNlOwoJCQkJCQlicmVhazsK
CQkJCQl9CgkJCQl9CgkJCX0JCQoJCQkvL2lmIChpc1RvcCB8fCBleGVjdXRlV3hSZXNpbGllbmNl
U2VydmljZXMpCgkJCQkvL2xvZ0RlYnVnKGJhc2VTZXJ2aWNlTmFtZSArICI6ICIgKyBpc1RvcCAr
ICIsIiArIGV4ZWN1dGVXeFJlc2lsaWVuY2VTZXJ2aWNlcyk7CgkJCS8vIHdlIGhhdmUgdG8gbWFr
ZSBzdXJlIHRoYXQgdGhlIHNlcnZjaWUgaW52b2NhdGlvbiBjaGFpbiBpcyBub3QgY3V0CgkJCWlm
IChjaGFpbi5oYXNOZXh0KCkpIHsKCQkJCXRyeSB7CgkJCQkJaWYgKGV4ZWN1dGVXeFJlc2lsaWVu
Y2VTZXJ2aWNlcykgewoJCQkJCQl0cnkgewoJCQkJCQkJLy9sb2dEZWJ1ZygicGlwZTE6ICIgKyBw
aXBlbGluZS5nZXRDbGFzcygpLmhhc2hDb2RlKCkpOwoJCQkJCQkJZXhlY3V0ZVNlcnZpY2UoInd4
LnJlc2lsaWVuY2UuaW1wbC5pbnZva2VDaGFpblByb2Nlc3NvciIsICJwcmVQcm9jZXNzRm9yVG9w
TGV2ZWxTZXJ2aWNlIiwgcGlwZWxpbmUsIGJhc2VTZXJ2aWNlTmFtZSk7CgkJCQkJCQkvL2xvZ0Rl
YnVnKCJwaXBlMjogIiArIHBpcGVsaW5lLmdldENsYXNzKCkuaGFzaENvZGUoKSk7CgkJCQkJCQkv
L3BpcGVNYXAgPSBuZXcgSURhdGFNYXAocGlwZWxpbmUpOwoJCQkJCQl9IGNhdGNoKEV4Y2VwdGlv
biBlKSB7CgkJCQkJCQlsb2dFcnJvcigiRXJyb3IgaW4gcHJlUHJvY2Vzc0ZvclRvcExldmVsU2Vy
dmljZTogIiArIGUpOwoJCQkJCQl9CgkJCQkJfQoJCgkJCQkJLy9sb2dEZWJ1ZygiQmVmb3JlIG9y
aWdpbmFsIFNlcnZpY2UiKTsKCQkJCQkKCQkJCQkvL2xvZ0RlYnVnKCJwaXBlMzogIiArIHBpcGVs
aW5lLmdldENsYXNzKCkuaGFzaENvZGUoKSk7CgkJCQkJKChJbnZva2VDaGFpblByb2Nlc3Nvcikg
Y2hhaW4ubmV4dCgpKS5wcm9jZXNzKGNoYWluLCBiYXNlU2VydmljZSwgcGlwZWxpbmUsIHN0YXR1
cyk7CgkJCQkJLy9sb2dEZWJ1ZygicGlwZTQ6ICIgKyBwaXBlbGluZS5nZXRDbGFzcygpLmhhc2hD
b2RlKCkpOwoJCQkJCQoJCQkJCS8vbG9nRGVidWcoIkFmdGVyIG9yaWdpbmFsIFNlcnZpY2UiKTsK
CQkJCQkKCQkJCX0gY2F0Y2ggKEV4Y2VwdGlvbiBvcmlnaW5hbEV4Y2VwdGlvbikgewoJCQkJCS8v
cGlwZU1hcCA9IG5ldyBJRGF0YU1hcChwaXBlbGluZSk7CgkJCQkJaWYgKGV4ZWN1dGVXeFJlc2ls
aWVuY2VTZXJ2aWNlcykgewoJCQkJCQlib29sZWFuIHd4UmVzaWxpZW5jZVBvc3RQcm9jZXNzRXhl
Y3V0ZWQgPSBwaXBlTWFwLmdldEFzQm9vbGVhbihQT1NUUFJPQ0VTU19FWEVDVVRFRCk7CgkJCQkJ
CS8vbG9nRGVidWcoInd4UmVzaWxpZW5jZVBvc3RQcm9jZXNzRXhlY3V0ZWQ6ICIgKyB3eFJlc2ls
aWVuY2VQb3N0UHJvY2Vzc0V4ZWN1dGVkKTsKCQkJCQkJaWYgKCF3eFJlc2lsaWVuY2VQb3N0UHJv
Y2Vzc0V4ZWN1dGVkKSB7CgkJCQkJCQlsb2dFcnJvcigiSGFuZGxlIGVycm9yIik7CgkJCQkJCQkJ
CQoJCQkJCQkJSURhdGEgbGFzdEVycm9yID0gbnVsbDsKCQkJCQkJCXRyeSB7CgkJCQkJCQkJZXhl
Y3V0ZVNlcnZpY2UoInB1Yi5mbG93IiwgImdldExhc3RFcnJvciIsIHBpcGVsaW5lLCBiYXNlU2Vy
dmljZU5hbWUpOwkJCQkJCQoJCQkJCQkJCS8vcGlwZU1hcCA9IG5ldyBJRGF0YU1hcChwaXBlbGlu
ZSk7CgkJCQkJCQkJCgkJCQkJCQkJbGFzdEVycm9yID0gcGlwZU1hcC5nZXRBc0lEYXRhKCJsYXN0
RXJyb3IiKTsKCQkJCQkJCQlpZiAobGFzdEVycm9yID09IG51bGwpIHsKCQkJCQkJCQkJbGFzdEVy
cm9yID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOwoJCQkJCQkJCQlJRGF0YU1hcCBsYXN0RXJyb3JN
YXAgPSBuZXcgSURhdGFNYXAobGFzdEVycm9yKTsKCQkJCQkJCQkJbGFzdEVycm9yTWFwLnB1dCgi
ZXJyb3IiLCBvcmlnaW5hbEV4Y2VwdGlvbi5nZXRMb2NhbGl6ZWRNZXNzYWdlKCkpOwoJCQkJCQkJ
CQlsYXN0RXJyb3JNYXAucHV0KCJlcnJvclR5cGUiLCBvcmlnaW5hbEV4Y2VwdGlvbi5nZXRDbGFz
cygpLmdldENhbm9uaWNhbE5hbWUoKSk7CgkJCQkJCQkJCXBpcGVNYXAucHV0KCJsYXN0RXJyb3Ii
LCBsYXN0RXJyb3IpOwoJCQkJCQkJCX0KCQkJCQkJCX0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CgkJ
CQkJCQkJbG9nRXJyb3IoIkNvdWxkIG5vdCBjYWxsIGdldExhc3RFcnJvciIpOwoJCQkJCQkJCWxh
c3RFcnJvciA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCQkJCQkJCQlJRGF0YU1hcCBsYXN0RXJy
b3JNYXAgPSBuZXcgSURhdGFNYXAobGFzdEVycm9yKTsKCQkJCQkJCQlsYXN0RXJyb3JNYXAucHV0
KCJlcnJvciIsIG9yaWdpbmFsRXhjZXB0aW9uLmdldExvY2FsaXplZE1lc3NhZ2UoKSk7CgkJCQkJ
CQkJbGFzdEVycm9yTWFwLnB1dCgiZXJyb3JUeXBlIiwgb3JpZ2luYWxFeGNlcHRpb24uZ2V0Q2xh
c3MoKS5nZXRDYW5vbmljYWxOYW1lKCkpOwoJCQkJCQkJCXBpcGVNYXAucHV0KCJsYXN0RXJyb3Ii
LCBsYXN0RXJyb3IpOwoJCQkJCQkJfQoJCQoJCQkJCQkJdHJ5IHsKCQkJCQkJCQlleGVjdXRlU2Vy
dmljZSgid3gucmVzaWxpZW5jZS5wdWIucmVzaWxpZW5jZSIsICJoYW5kbGVFcnJvciIsIHBpcGVs
aW5lLCBiYXNlU2VydmljZU5hbWUpOwoJCQkJCQkJfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHsKCQkJ
CQkJCQlsb2dFcnJvcigiRXJyb3IgaW4gaGFuZGxlRXJyb3I6ICIgKyBlKTsKCQkJCQkJCX0KCQkJ
CQkJfSBlbHNlIHsKCQkJCQkJCS8vIEVycm9yIGFscmVhZHkgaGFuZGxlZCBpbiBGbG93CgkJCQkJ
CQl0aHJvdyBvcmlnaW5hbEV4Y2VwdGlvbjsKCQkJCQkJfSAKCQkJCQl9IGVsc2UgewoJCQkJCQkv
L2xvZ0RlYnVnKCJleGVjdXRlIik7CgkJCQkJCXRocm93IG9yaWdpbmFsRXhjZXB0aW9uOwoJCQkJ
CX0KCQkJCQoJCQkJfSBmaW5hbGx5IHsKCQkJCQkvL3BpcGVNYXAgPSBuZXcgSURhdGFNYXAocGlw
ZWxpbmUpOwoJCQkJCWJvb2xlYW4gd3hSZXNpbGllbmNlUG9zdFByb2Nlc3NFeGVjdXRlZCA9IHBp
cGVNYXAuZ2V0QXNCb29sZWFuKFBPU1RQUk9DRVNTX0VYRUNVVEVEKTsKCQkJCQlpZiAoIXd4UmVz
aWxpZW5jZVBvc3RQcm9jZXNzRXhlY3V0ZWQpIHsKCQkJCQkJaWYgKGV4ZWN1dGVXeFJlc2lsaWVu
Y2VTZXJ2aWNlcykgewoJCQkJCQkvL2xvZ0RlYnVnKGJhc2VTZXJ2aWNlTmFtZSArICIgd3hSZXNp
bGllbmNlUG9zdFByb2Nlc3NFeGVjdXRlZDogIiArIHd4UmVzaWxpZW5jZVBvc3RQcm9jZXNzRXhl
Y3V0ZWQpOwoJCQkJCQkJLy9sb2dEZWJ1ZygicGlwZTU6ICIgKyBwaXBlbGluZS5nZXRDbGFzcygp
Lmhhc2hDb2RlKCkpOwoJCQkJCQkJZXhlY3V0ZVNlcnZpY2UoInd4LnJlc2lsaWVuY2UucHViLnJl
c2lsaWVuY2UiLCAicG9zdFByb2Nlc3NGb3JUb3BMZXZlbFNlcnZpY2UiLCBwaXBlbGluZSwgYmFz
ZVNlcnZpY2VOYW1lKTsKCQkJCQkJCS8vbG9nRGVidWcoInBpcGU2OiAiICsgcGlwZWxpbmUuZ2V0
Q2xhc3MoKS5oYXNoQ29kZSgpKTsKCQkJCQkJCS8vcGlwZU1hcCA9IG5ldyBJRGF0YU1hcChwaXBl
bGluZSk7CgkJCQkJCX0KCQkJCQkJcGlwZU1hcC5yZW1vdmUoUE9TVFBST0NFU1NfRVhFQ1VURUQp
OwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCX0KfQoKcHJpdmF0ZSBzdGF0aWMgSURhdGEgZXhlY3V0
ZVNlcnZpY2UoU3RyaW5nIGlmYywgU3RyaW5nIHN2YywgSURhdGEgcGlwZWxpbmUsIFN0cmluZyBj
dXJyZW50U2VydmljZU5hbWUpIHRocm93cyBTZXJ2ZXJFeGNlcHRpb24sIElTUnVudGltZUV4Y2Vw
dGlvbiB7CgkvLyBBdm9pZCBlbmRsZXNzIGxvb3AgaW4gY2FzZSBvZiBicm9rZW4gZXJyb25lb3Vz
IHNlcnZpY2U6CglpZiAoIShpZmMgKyAiOiIgKyBzdmMpLmVxdWFscyhjdXJyZW50U2VydmljZU5h
bWUpKSB7CgkJdHJ5IHsKCQkJcmV0dXJuIFNlcnZpY2UuZG9JbnZva2UoaWZjLCBzdmMsIHBpcGVs
aW5lKTsKCQl9IGNhdGNoIChJU1J1bnRpbWVFeGNlcHRpb24gZSkgewoJCQl0aHJvdyBlOwoJCX0g
Y2F0Y2ggKFNlcnZlckV4Y2VwdGlvbiBlKSB7CgkJCXRocm93IGU7CgkJfSBjYXRjaCAoRXhjZXB0
aW9uIGUpIHsKCQkJdGhyb3cgbmV3IFNlcnZpY2VFeGNlcHRpb24oZSk7CgkJfQoJfSBlbHNlIHsK
CQlyZXR1cm4gcGlwZWxpbmU7Cgl9Cn0KCnByaXZhdGUgc3RhdGljIHZvaWQgbG9nRGVidWcoU3Ry
aW5nIG1lc3NhZ2UpIHsKCUpvdXJuYWxMb2dnZXIubG9nKDQsIEpvdXJuYWxMb2dnZXIuRkFDX0ZM
T1dfU1ZDLCBKb3VybmFsTG9nZ2VyLklORk8sICJXeFJlc2lsaWVuY2VQcm9jZXNzb3IiLCBtZXNz
YWdlKTsKfQoKcHJpdmF0ZSBzdGF0aWMgdm9pZCBsb2dJbmZvKFN0cmluZyBtZXNzYWdlKSB7CglK
b3VybmFsTG9nZ2VyLmxvZyg0LCBKb3VybmFsTG9nZ2VyLkZBQ19GTE9XX1NWQywgSm91cm5hbExv
Z2dlci5JTkZPLCAiV3hSZXNpbGllbmNlUHJvY2Vzc29yIiwgbWVzc2FnZSk7Cn0KCnByaXZhdGUg
c3RhdGljIHZvaWQgbG9nRXJyb3IoU3RyaW5nIG1lc3NhZ2UpIHsKCUpvdXJuYWxMb2dnZXIubG9n
KDQsIEpvdXJuYWxMb2dnZXIuRkFDX0ZMT1dfU1ZDLCBKb3VybmFsTG9nZ2VyLkVSUk9SLCAiV3hS
ZXNpbGllbmNlUHJvY2Vzc29yIiwgbWVzc2FnZSk7Cn0KCgkKcHJpdmF0ZSBzdGF0aWMgZmluYWwg
U3RyaW5nIFJFRElSRUNURUQgPSAiQFd4UmVzaWxpZW5jZS5zZXJ2aWNlLnJlZGlyZWN0ZWRAIjsK
cHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFBPU1RQUk9DRVNTX0VYRUNVVEVEID0gIkBXeFJl
c2lsaWVuY2UucG9zdFByb2Nlc3MuZXhlY3V0ZWRAIjsKCgk=</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>com.wm.util.JournalLogger</value>
    <value>com.wm.util.ServerException</value>
    <value>com.wm.app.b2b.server.BaseService</value>
    <value>com.wm.app.b2b.server.ISRuntimeException</value>
    <value>com.wm.app.b2b.server.invoke.InvokeChainProcessor</value>
    <value>com.wm.app.b2b.server.invoke.InvokeManager</value>
    <value>com.wm.app.b2b.server.invoke.ServiceStatus</value>
    <value>java.util.Arrays</value>
    <value>java.util.Iterator</value>
    <value>com.softwareag.util.IDataMap</value>
  </array>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
</Values>
