<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">LyoqDQogKiBSZWN1cnNpdmVseSByZW1vdmVzIGFsbCB2YWx1ZXMgZnJvbSBhIGRvY3VtZW50IHRo
YXQgYXJlIG5vdCB3aGl0ZWxpc3RlZC4NCiAqIA0KICogQHBhcmFtIGtleSBUaGUga2V5IG9mIHRo
ZSB2YWx1ZS4gQ2FuIGJlIG51bGwuDQogKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNr
IGlmIGl0IHNob3VsZCBiZSByZW1vdmVkLiBUaGUgcm9vdCBzaG91bGQgYmUgZWl0aGVyIGEgZG9j
dW1lbnQNCiAqIG9yIGEgZG9jdW1lbnQtYXJyYXkuDQogKiBAcGFyYW0gd2hpdGVsaXN0IEEgc2V0
IG9mIGNsYXNzZXMgdGhhdCBzaG91bGQgYmUga2VwdC4gQ2FuIGJlIG51bGwgaWYgb25seSB0aGUg
ZGVmYXVsdCB0eXBlcw0KICogc2hvdWxkIGJlIGtlcHQuDQogKiBAcGFyYW0gc2l6ZSBBIERvY3Vt
ZW50U2l6ZS1PYmplY3QgdG8gY2FsY3VsYXRlIHRoZSBzaXplIG9mIHRoZSBkb2N1bWVudC4NCiAq
IEByZXR1cm4gV2hldGhlciB0aGUgdmFsdWUgc2hvdWxkIGJlIGtlcHQgb3Igbm90LiBUaGUgY2Fs
bGVyIGlzIHJlc3BvbnNpYmxlIGZvciByZW1vdmluZyB0aGUgdmFsdWUuDQogKiBAdGhyb3dzIHd4
LnJlc2lsaWVuY2UuaW1wbC5zdGF0dXMuYXBwbHlXaGl0ZWxpc3RfU1ZDLkRvY3VtZW50U2l6ZS5E
b2N1bWVudFNpemVUb29CaWdFeGNlcHRpb24gDQogKi8NCnByaXZhdGUgc3RhdGljIGJvb2xlYW4g
YXBwbHlXaGl0ZWxpc3QoU3RyaW5nIGtleSwgT2JqZWN0IHZhbHVlLCBMaXN0PENsYXNzPD8+PiB3
aGl0ZWxpc3QsIERvY3VtZW50U2l6ZSBzaXplKQ0KCQl0aHJvd3MgRG9jdW1lbnRTaXplLlRvb0Jp
Z0V4Y2VwdGlvbiB7DQoJDQoJaWYgKHZhbHVlIGluc3RhbmNlb2YgSURhdGEpIHsNCgkJc2l6ZS5h
ZGRLZXkoa2V5KTsNCgkJc2l6ZS5hZGRJRGF0YSgpOw0KDQoJCUlEYXRhQ3Vyc29yIGN1cnNvciA9
ICgoSURhdGEpIHZhbHVlKS5nZXRDdXJzb3IoKTsNCgkJYm9vbGVhbiBkZWxldGUgPSBmYWxzZTsN
CgkJd2hpbGUgKGRlbGV0ZSAmJiBjdXJzb3IuZGVsZXRlKCkgfHwgY3Vyc29yLm5leHQoKSkgew0K
CQkJZGVsZXRlID0gIWFwcGx5V2hpdGVsaXN0KGN1cnNvci5nZXRLZXkoKSwgY3Vyc29yLmdldFZh
bHVlKCksIHdoaXRlbGlzdCwgc2l6ZSk7DQoJCX0NCgkJY3Vyc29yLmRlc3Ryb3koKTsNCgkJcmV0
dXJuIHRydWU7DQoJfQ0KCWVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURhdGFbXSkgew0KCQlz
aXplLmFkZEtleShrZXkpOw0KDQoJCWZvciAoSURhdGEgZG9jIDogKElEYXRhW10pIHZhbHVlKSB7
DQoJCQlhcHBseVdoaXRlbGlzdChudWxsLCBkb2MsIHdoaXRlbGlzdCwgc2l6ZSk7DQoJCX0NCgkJ
cmV0dXJuIHRydWU7CQkJDQoJfQ0KDQoJYm9vbGVhbiBrZWVwID0gdmFsdWUgPT0gbnVsbA0KCQl8
fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZyAgICAgICYmIHNpemUuYWRkU3RyaW5nKHZhbHVlKQ0K
CQl8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZ1tdICAgICYmIHNpemUuYWRkU3RyaW5nQXJyYXko
dmFsdWUpDQoJCXx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyICAgICAgJiYgc2l6ZS5hZGROdW1i
ZXIodmFsdWUpDQoJCXx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyW10gICAgJiYgc2l6ZS5hZGRO
dW1iZXJBcnJheSh2YWx1ZSkNCgkJfHwgdmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuICAgICAmJiBz
aXplLmFkZEJvb2xlYW4odmFsdWUpDQoJCXx8IHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbltdICAg
JiYgc2l6ZS5hZGRCb29sZWFuQXJyYXkodmFsdWUpDQoJCXx8IHZhbHVlIGluc3RhbmNlb2YgQ2hh
cmFjdGVyICAgJiYgc2l6ZS5hZGRDaGFyKHZhbHVlKQ0KCQl8fCB2YWx1ZSBpbnN0YW5jZW9mIENo
YXJhY3RlcltdICYmIHNpemUuYWRkQ2hhckFycmF5KHZhbHVlKQ0KCQl8fCB2YWx1ZSBpbnN0YW5j
ZW9mIERhdGUgICAgICAgICYmIHNpemUuYWRkRGF0ZSh2YWx1ZSkNCgkJfHwgdmFsdWUgaW5zdGFu
Y2VvZiBEYXRlW10gICAgICAmJiBzaXplLmFkZERhdGVBcnJheSh2YWx1ZSkNCgkJDQoJCS8vIEEg
U3RyaW5nIFRhYmxlIGlzIGludGVybmFsbHkganVzdCBhIHR3byBkaW1lbnNpb25hbCBTdHJpbmcg
YXJyYXkuDQoJCXx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nW11bXSAgJiYgc2l6ZS5hZGRTdHJp
bmdUYWJsZSh2YWx1ZSkNCgkJCQkJCQ0KCQkvLyBDaGVjayBmb3IgcHJpbWl0aXZlIGFycmF5cy4N
CgkJfHwgdmFsdWUuZ2V0Q2xhc3MoKS5pc0FycmF5KCkgJiYgdmFsdWUuZ2V0Q2xhc3MoKS5nZXRD
b21wb25lbnRUeXBlKCkuaXNQcmltaXRpdmUoKSAmJiBzaXplLmFkZFByaW1pdGl2ZUFycmF5KHZh
bHVlKQ0KDQoJCS8vIENoZWNrIGlmIHRoZSB2YWx1ZSBpcyBvZiBhbnkgdHlwZSBpbiB0aGUgcHJv
dmlkZWQgd2hpdGVsaXN0LiBUaGUgdmFsdWUgaXMgYWxzbyB2YWxpZCBpZiBpdCBpcw0KCQkvLyBh
biBhcnJheSBvZiB0aG9zZSB0eXBlcy4NCgkJfHwgd2hpdGVsaXN0ICE9IG51bGwgJiYgd2hpdGVs
aXN0LnN0cmVhbSgpLmFueU1hdGNoKGMgLT4gdmFsdWUuZ2V0Q2xhc3MoKS5pc0FycmF5KCkNCgkJ
CQk/IGMuaXNBc3NpZ25hYmxlRnJvbSh2YWx1ZS5nZXRDbGFzcygpLmdldENvbXBvbmVudFR5cGUo
KSkNCgkJCQk6IGMuaXNJbnN0YW5jZSh2YWx1ZSkNCgkJKTsNCgkNCglpZiAoa2VlcCkgc2l6ZS5h
ZGRLZXkoa2V5KTsNCglyZXR1cm4ga2VlcDsNCn0NCg0KLyoqDQogKiBUaGlzIGNsYXNzIHRha2Vz
IGNhcmUgb2YgdGhlIHNpemUtY2FsY3VsYXRpb24uIEl0IHByb3ZpZGVzIGRpZmZlcmVudCBtZXRo
b2RzIGZvciBhZGRpbmcgdGhlIHNpemUgb2YgdmFyaW91cyB0eXBlcw0KICogYW5kIG1heSB0aHJv
dyBhIFRvb0JpZ0V4Y2VwdGlvbiBpZiB0aGUgb3B0aW9uYWwgbWF4IHNpemUgaXMgZXhjZWVkZWQu
DQogKi8NCnByaXZhdGUgc3RhdGljIGNsYXNzIERvY3VtZW50U2l6ZSB7DQoJcHJpdmF0ZSBzdGF0
aWMgZmluYWwgTWFwPENsYXNzPD8+LCBJbnRlZ2VyPiBOVU1CRVJfU0laRVM7DQoJcHJpdmF0ZSBz
dGF0aWMgZmluYWwgaW50IElEQVRBX09WRVJIRUFEX1NJWkUgPSAxNzsNCglwcml2YXRlIHN0YXRp
YyBmaW5hbCBpbnQgUEFJUl9PVkVSSEVBRF9TSVpFID0gMTsNCglwcml2YXRlIHN0YXRpYyBmaW5h
bCBpbnQgQ0hBUl9TSVpFID0gMjsNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgQk9PTF9TSVpF
ID0gMTsNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgREFURV9TSVpFID0gMzI7DQoNCglwcml2
YXRlIGxvbmcgc2l6ZTsNCglwcml2YXRlIExvbmcgbWF4U2l6ZTsNCgkNCglwdWJsaWMgRG9jdW1l
bnRTaXplKExvbmcgbWF4U2l6ZSkgew0KCQl0aGlzLm1heFNpemUgPSBtYXhTaXplOw0KCX0NCgkN
CglwdWJsaWMgbG9uZyBnZXRTaXplKCkgew0KCQlyZXR1cm4gc2l6ZTsNCgl9DQoJDQoJcHVibGlj
IGJvb2xlYW4gYWRkS2V5KFN0cmluZyBrZXkpIHRocm93cyBUb29CaWdFeGNlcHRpb24gIHsNCgkJ
aWYgKGtleSAhPSBudWxsKSB7DQoJCQlzaXplICs9IGtleS5sZW5ndGgoKSAqIENIQVJfU0laRTsN
CgkJCXNpemUgKz0gUEFJUl9PVkVSSEVBRF9TSVpFOw0KCQkJcmV0dXJuIGNoZWNrU2l6ZSgpOw0K
CQl9DQoJCXJldHVybiB0cnVlOw0KCX0NCgkNCglwdWJsaWMgYm9vbGVhbiBhZGRJRGF0YSgpIHRo
cm93cyBUb29CaWdFeGNlcHRpb24gIHsNCgkJc2l6ZSArPSBJREFUQV9PVkVSSEVBRF9TSVpFOw0K
CQlyZXR1cm4gY2hlY2tTaXplKCk7DQoJfQ0KCQ0KCXB1YmxpYyBib29sZWFuIGFkZFN0cmluZyhP
YmplY3QgbykgdGhyb3dzIFRvb0JpZ0V4Y2VwdGlvbiAgew0KCQlzaXplICs9ICgoU3RyaW5nKSBv
KS5sZW5ndGgoKSAqIENIQVJfU0laRTsNCgkJcmV0dXJuIGNoZWNrU2l6ZSgpOw0KCX0NCgkNCglw
dWJsaWMgYm9vbGVhbiBhZGRTdHJpbmdBcnJheShPYmplY3QgbykgdGhyb3dzIFRvb0JpZ0V4Y2Vw
dGlvbiAgew0KCQlmb3IgKFN0cmluZyBzIDogKFN0cmluZ1tdKSBvKSB7DQoJCQlpZiAocyAhPSBu
dWxsKSBzaXplICs9IHMubGVuZ3RoKCkgKiBDSEFSX1NJWkU7DQoJCX0NCgkJcmV0dXJuIGNoZWNr
U2l6ZSgpOw0KCX0NCgkNCglwdWJsaWMgYm9vbGVhbiBhZGRTdHJpbmdUYWJsZShPYmplY3Qgbykg
dGhyb3dzIFRvb0JpZ0V4Y2VwdGlvbiAgew0KCQlmb3IgKFN0cmluZ1tdIHMxIDogKFN0cmluZ1td
W10pIG8pIHsNCgkJCWlmIChzMSAhPSBudWxsKSB7DQoJCQkJZm9yIChTdHJpbmcgczIgOiAoU3Ry
aW5nW10pIHMxKSB7DQoJCQkJCWlmIChzMiAhPSBudWxsKSBzaXplICs9IHMyLmxlbmd0aCgpICog
Q0hBUl9TSVpFOw0KCQkJCX0NCgkJCX0NCgkJfQ0KCQlyZXR1cm4gY2hlY2tTaXplKCk7DQoJfQ0K
CQ0KCXB1YmxpYyBib29sZWFuIGFkZE51bWJlcihPYmplY3QgbykgdGhyb3dzIFRvb0JpZ0V4Y2Vw
dGlvbiAgew0KCQlzaXplICs9IE5VTUJFUl9TSVpFUy5nZXQoby5nZXRDbGFzcygpKTsNCgkJcmV0
dXJuIGNoZWNrU2l6ZSgpOw0KCX0NCgkNCglwdWJsaWMgYm9vbGVhbiBhZGROdW1iZXJBcnJheShP
YmplY3QgbykgdGhyb3dzIFRvb0JpZ0V4Y2VwdGlvbiAgew0KCQlzaXplICs9IE5VTUJFUl9TSVpF
Uy5nZXQoby5nZXRDbGFzcygpLmdldENvbXBvbmVudFR5cGUoKSkgKiBzaXplT2YoKE9iamVjdFtd
KSBvKTsNCgkJcmV0dXJuIGNoZWNrU2l6ZSgpOw0KCX0NCgkNCglwdWJsaWMgYm9vbGVhbiBhZGRC
b29sZWFuKE9iamVjdCBvKSB0aHJvd3MgVG9vQmlnRXhjZXB0aW9uICB7DQoJCXNpemUgKz0gQk9P
TF9TSVpFOw0KCQlyZXR1cm4gY2hlY2tTaXplKCk7DQoJfQ0KCQ0KCXB1YmxpYyBib29sZWFuIGFk
ZEJvb2xlYW5BcnJheShPYmplY3QgbykgdGhyb3dzIFRvb0JpZ0V4Y2VwdGlvbiAgew0KCQlzaXpl
ICs9IEJPT0xfU0laRSAqIHNpemVPZigoT2JqZWN0W10pIG8pOw0KCQlyZXR1cm4gY2hlY2tTaXpl
KCk7DQoJfQ0KCQ0KCXB1YmxpYyBib29sZWFuIGFkZENoYXIoT2JqZWN0IG8pIHRocm93cyBUb29C
aWdFeGNlcHRpb24gIHsNCgkJc2l6ZSArPSBDSEFSX1NJWkU7DQoJCXJldHVybiBjaGVja1NpemUo
KTsNCgl9DQoJDQoJcHVibGljIGJvb2xlYW4gYWRkQ2hhckFycmF5KE9iamVjdCBvKSB0aHJvd3Mg
VG9vQmlnRXhjZXB0aW9uICB7DQoJCXNpemUgKz0gQ0hBUl9TSVpFICogc2l6ZU9mKChPYmplY3Rb
XSkgbyk7DQoJCXJldHVybiBjaGVja1NpemUoKTsNCgl9DQoJDQoJcHVibGljIGJvb2xlYW4gYWRk
RGF0ZShPYmplY3QgbykgdGhyb3dzIFRvb0JpZ0V4Y2VwdGlvbiAgew0KCQlzaXplICs9IERBVEVf
U0laRTsNCgkJcmV0dXJuIGNoZWNrU2l6ZSgpOw0KCX0NCgkNCglwdWJsaWMgYm9vbGVhbiBhZGRE
YXRlQXJyYXkoT2JqZWN0IG8pIHRocm93cyBUb29CaWdFeGNlcHRpb24gIHsNCgkJc2l6ZSArPSBE
QVRFX1NJWkUgKiBzaXplT2YoKE9iamVjdFtdKSBvKTsNCgkJcmV0dXJuIGNoZWNrU2l6ZSgpOw0K
CX0NCgkNCglwdWJsaWMgYm9vbGVhbiBhZGRQcmltaXRpdmVBcnJheShPYmplY3QgbykgdGhyb3dz
IFRvb0JpZ0V4Y2VwdGlvbiAgew0KCQlzaXplICs9IE5VTUJFUl9TSVpFUy5nZXQoby5nZXRDbGFz
cygpLmdldENvbXBvbmVudFR5cGUoKSkgKiBBcnJheS5nZXRMZW5ndGgobyk7DQoJCXJldHVybiBj
aGVja1NpemUoKTsNCgl9DQoJDQoJcHJpdmF0ZSBsb25nIHNpemVPZihPYmplY3RbXSBhcnJheSkg
ew0KCQlyZXR1cm4gQXJyYXlzLnN0cmVhbShhcnJheSkNCgkJCQkuZmlsdGVyKGphdmEudXRpbC5P
YmplY3RzOjpub25OdWxsKQ0KCQkJCS5jb3VudCgpOw0KCX0NCgkNCglwcml2YXRlIGJvb2xlYW4g
Y2hlY2tTaXplKCkgdGhyb3dzIFRvb0JpZ0V4Y2VwdGlvbiAgew0KCQlpZiAobWF4U2l6ZSAhPSBu
dWxsICYmIHNpemUgPiBtYXhTaXplKSB0aHJvdyBuZXcgVG9vQmlnRXhjZXB0aW9uKCk7DQoJCXJl
dHVybiB0cnVlOw0KCX0NCgkNCglzdGF0aWMgew0KCQlOVU1CRVJfU0laRVMgPSBuZXcgSGFzaE1h
cDw+KCk7DQoJCU5VTUJFUl9TSVpFUy5wdXQoQnl0ZS5jbGFzcywgMSk7DQoJCU5VTUJFUl9TSVpF
Uy5wdXQoU2hvcnQuY2xhc3MsIDIpOw0KCQlOVU1CRVJfU0laRVMucHV0KEludGVnZXIuY2xhc3Ms
IDQpOw0KCQlOVU1CRVJfU0laRVMucHV0KExvbmcuY2xhc3MsIDgpOw0KCQlOVU1CRVJfU0laRVMu
cHV0KEZsb2F0LmNsYXNzLCA0KTsNCgkJTlVNQkVSX1NJWkVTLnB1dChEb3VibGUuY2xhc3MsIDgp
Ow0KCQkvLyBDaGFyYWN0ZXIgbm90IG5lZWRlZCwgc2luY2UgaXQgaXNuJ3QgYSBudW1iZXIuDQoN
CgkJTlVNQkVSX1NJWkVTLnB1dChieXRlLmNsYXNzLCAxKTsNCgkJTlVNQkVSX1NJWkVTLnB1dChz
aG9ydC5jbGFzcywgMik7DQoJCU5VTUJFUl9TSVpFUy5wdXQoaW50LmNsYXNzLCA0KTsNCgkJTlVN
QkVSX1NJWkVTLnB1dChsb25nLmNsYXNzLCA4KTsNCgkJTlVNQkVSX1NJWkVTLnB1dChmbG9hdC5j
bGFzcywgNCk7DQoJCU5VTUJFUl9TSVpFUy5wdXQoZG91YmxlLmNsYXNzLCA4KTsNCgkJTlVNQkVS
X1NJWkVTLnB1dChjaGFyLmNsYXNzLCBDSEFSX1NJWkUpOw0KCX0NCgkNCgljbGFzcyBUb29CaWdF
eGNlcHRpb24gZXh0ZW5kcyBFeGNlcHRpb24ge30NCn0NCg0KDQoJDQo=</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>java.lang.reflect.Array</value>
    <value>java.util.Arrays</value>
    <value>java.util.Date</value>
    <value>java.util.HashMap</value>
    <value>java.util.List</value>
    <value>java.util.Map</value>
    <value>java.util.stream.Collectors</value>
    <value>com.wm.data.IData</value>
    <value>com.wm.data.IDataCursor</value>
    <value>com.wm.data.IDataUtil</value>
  </array>
</Values>
