<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">QEZ1bmN0aW9uYWxJbnRlcmZhY2UKcHVibGljIHN0YXRpYyBpbnRlcmZhY2UgRXhjZXB0aW9uSGFu
ZGxpbmdMaXN0ZW5lciB7CglwdWJsaWMgdm9pZCBhY2NlcHQoU3RyaW5nIHBTZXJ2aWNlTmFtZSwg
SURhdGEgcFBpcGVsaW5lKTsKfQoKQEZ1bmN0aW9uYWxJbnRlcmZhY2UKcHVibGljIHN0YXRpYyBp
bnRlcmZhY2UgQ2FsbGVyVHlwZVN1cHBsaWVyIHsKCXB1YmxpYyBTdHJpbmcgZ2V0KCk7Cn0KCnBy
aXZhdGUgc3RhdGljIFBhdGggY3JlYXRlU3VtbWFyaXplZEV4Y2VwdGlvbkhhbmRsaW5nKCkgdGhy
b3dzIFNlcnZpY2VFeGNlcHRpb24gewoJc3luY2hyb25pemVkKGNyZWF0ZVN1bW1hcml6ZWRFeGNl
cHRpb25IYW5kbGluZ0xvY2spIHsKCQlyZXR1cm4gY3JlYXRlU3VtbWFyaXplZEV4Y2VwdGlvbkhh
bmRsaW5nKFNVTU1BUklaRURfRVhDRVBUSU9OX0hBTkRMSU5HX0ZJTEUpOwoJfQp9CnByaXZhdGUg
c3RhdGljIFBhdGggY3JlYXRlU3VtbWFyaXplZEV4Y2VwdGlvbkhhbmRsaW5nKFN0cmluZyBwRmls
ZU5hbWUpCgkJdGhyb3dzIFNlcnZpY2VFeGNlcHRpb24gewoJRmlsZSBJU0RpciA9IFNlcnZlckFQ
SS5nZXRTZXJ2ZXJDb25maWdEaXIoKS5nZXRQYXJlbnRGaWxlKCk7CglGaWxlIElTUGFja2FnZXMg
PSBuZXcgamF2YS5pby5GaWxlKElTRGlyLCAicGFja2FnZXMiKTsKCWZpbmFsIFBhdGggY29uZmln
RGlyID0gU2VydmVyQVBJLmdldFBhY2thZ2VDb25maWdEaXIoV1hfUkVTSUxJRU5DRSkudG9QYXRo
KCk7CglmaW5hbCBQYXRoIG91dHB1dEZpbGUgPSBjb25maWdEaXIucmVzb2x2ZShwRmlsZU5hbWUp
OwoJUGF0aHMuYXNzZXJ0UGFyZW50RGlyRXhpc3RzKG91dHB1dEZpbGUpOwoKCXRyeSB7CgkJdHJ5
IChDcmVhdG9yIGNyZWF0b3IgPSBTdW1tYXJpemVkRXhjZXB0aW9uSGFuZGxpbmdIYW5kbGVyLm5l
d0NyZWF0b3Iob3V0cHV0RmlsZSkpIHsKCQkJZm9yIChGaWxlIHBhY2thZ2VEaXIgOiBJU1BhY2th
Z2VzLmxpc3RGaWxlcygpKSB7CgkJCQlpZiAocGFja2FnZURpci5pc0RpcmVjdG9yeSgpKSB7CgkJ
CQkJZmluYWwgU3RyaW5nIHBhY2thZ2VOYW1lID0gcGFja2FnZURpci5nZXROYW1lKCk7CgkJCQkJ
aWYgKHBhY2thZ2VOYW1lLnN0YXJ0c1dpdGgoIldtIikpIHsKCQkJCQkJY29udGludWU7CgkJCQkJ
fQoJCQkJCWZpbmFsIEZpbGUgcGFja2FnZUNmZ0RpciA9IG5ldyBGaWxlKHBhY2thZ2VEaXIsICJj
b25maWciKTsKCQkJCQlpZiAocGFja2FnZUNmZ0Rpci5pc0RpcmVjdG9yeSgpKSB7CgkJCQkJCWZp
bmFsIEZpbGUgcGFja2FnZUVoZEZpbGUgPSBuZXcgRmlsZShwYWNrYWdlQ2ZnRGlyLCBFUlJPUl9I
QU5ETElOR19YTUxfRklMRSk7CgkJCQkJCWlmIChwYWNrYWdlRWhkRmlsZS5pc0ZpbGUoKSkgewoJ
CQkJCQkJY3JlYXRvci5wYXJzZShwYWNrYWdlRWhkRmlsZSwgcGFja2FnZU5hbWUpOwoJCQkJCQl9
CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJCXZhbGlkYXRlWE1MKCk7Cgl9IGNhdGNoIChFeGNlcHRp
b24gZSkgewoJCWxvZ0Vycm9yKCJFcnJvciBkdXJpbmcgcGFyc2luZyBvZiBzdW1tYXJpemVkRXhj
ZXB0aW9uSGFuZGxpbmdEZWZpbml0aW9uOiAiICsgZS5nZXRNZXNzYWdlKCkpOwoJCXRocm93IEV4
Y2VwdGlvbnMuc2hvdyhlLCBTZXJ2aWNlRXhjZXB0aW9uLmNsYXNzKTsKCX0KCXJldHVybiBvdXRw
dXRGaWxlOwp9Cgpwcml2YXRlIHN0YXRpYyBmaW5hbCBFeGNlcHRpb25IYW5kbGluZ0xpc3RlbmVy
IERFRkFVTFRfRVJST1JfSEFORExFUiA9IG5ldyBFeGNlcHRpb25IYW5kbGluZ0xpc3RlbmVyKCkg
ewoJcHVibGljIHZvaWQgYWNjZXB0KFN0cmluZyBzLCBJRGF0YSBkKSB7CgkJbG9nRGVidWcoIkRl
ZmF1bHRFcnJvckhhbmRsZXI6IC0tPiAiICsgcyk7CgkJdHJ5IHsKCQkJU2VydmljZS5kb0ludm9r
ZShOU05hbWUuY3JlYXRlKHMpLCBkKTsKCQl9IGNhdGNoIChFeGNlcHRpb24gZSkgewoJCQlsb2dE
ZWJ1ZygiRGVmYXVsdEVycm9ySGFuZGxlcjogIiArIGUuZ2V0Q2xhc3MoKS5nZXROYW1lKCkgKyAi
LCAiICsgZS5nZXRNZXNzYWdlKCkpOwoJCQl0aHJvdyBuZXcgVW5kZWNsYXJlZFRocm93YWJsZUV4
Y2VwdGlvbihlKTsKCQl9CgkJbG9nRGVidWcoIkRlZmF1bHRFcnJvckhhbmRsZXI6IDwtLSIpOwoJ
fQp9Owpwcml2YXRlIHN0YXRpYyBFeGNlcHRpb25IYW5kbGluZ0xpc3RlbmVyIGdldEVycm9ySGFu
ZGxlcigpIHsKCXN5bmNocm9uaXplZCAoZXhjZXB0aW9uSGFuZGxpbmdMaXN0ZW5lckxvY2spIHsK
CQlpZiAoX2V4Y2VwdGlvbkhhbmRsaW5nTGlzdGVuZXIgPT0gbnVsbCkgewoJCQlyZXR1cm4gREVG
QVVMVF9FUlJPUl9IQU5ETEVSOwoJCX0gZWxzZSB7CgkJCXJldHVybiBfZXhjZXB0aW9uSGFuZGxp
bmdMaXN0ZW5lcjsKCQl9Cgl9Cn0KcHVibGljIHN0YXRpYyB2b2lkIHNldEVycm9ySGFuZGxlcihF
eGNlcHRpb25IYW5kbGluZ0xpc3RlbmVyIHBFcnJvckhhbmRsaW5nTGlzdGVuZXIpIHsKCXN5bmNo
cm9uaXplZCAoZXhjZXB0aW9uSGFuZGxpbmdMaXN0ZW5lckxvY2spIHsKCQlfZXhjZXB0aW9uSGFu
ZGxpbmdMaXN0ZW5lciA9IHBFcnJvckhhbmRsaW5nTGlzdGVuZXI7Cgl9Cn0KcHJpdmF0ZSBzdGF0
aWMgdm9pZCBpbnZva2VFcnJvckhhbmRsZXIoSURhdGEgcEhhbmRsaW5nU2VydmljZUlucHV0LAoJ
CWZpbmFsIFN0cmluZyBwU2VydmljZU5hbWUpIHRocm93cyBFeGNlcHRpb24gewoJbG9nRGVidWco
Imludm9rZUVycm9ySGFuZGxlcjogLS0+ICIpOwoJZmluYWwgRXhjZXB0aW9uSGFuZGxpbmdMaXN0
ZW5lciBlaGwgPSBnZXRFcnJvckhhbmRsZXIoKTsKCWxvZ0RlYnVnKCJpbnZva2VFcnJvckhhbmRs
ZXI6IGVoPSIgKyBlaGwpOwoJZWhsLmFjY2VwdChwU2VydmljZU5hbWUsIHBIYW5kbGluZ1NlcnZp
Y2VJbnB1dCk7Cglsb2dEZWJ1ZygiaW52b2tlRXJyb3JIYW5kbGVyOiA8LS0iKTsKCgkvLyAtLS0g
PDxJUy1FTkQ+PiAtLS0KfQoKcHJpdmF0ZSBzdGF0aWMgRG9jdW1lbnQgZ2V0ZXJyb3JIYW5kbGlu
Z3MoKSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiB7CglzeW5jaHJvbml6ZWQoZXhjZXB0aW9uSGFu
ZGxpbmdMb2NrKSB7CgkJaWYgKF9leGNlcHRpb25IYW5kbGluZyAhPSBudWxsKSB7CgkJCXJldHVy
biBfZXhjZXB0aW9uSGFuZGxpbmc7CgkJfQoJfQoJaW5pdGlhbGl6ZUV4Y2VwdGlvbkhhbmRsaW5n
cyhudWxsKTsKCXN5bmNocm9uaXplZCAoZXhjZXB0aW9uSGFuZGxpbmdMb2NrKSB7CgkJaWYgKF9l
eGNlcHRpb25IYW5kbGluZyA9PSBudWxsKSB7CgkJCXRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNl
cHRpb24oIlVuYWJsZSB0byBpbml0aWFsaXplIGVycm9ySGFuZGxpbmcuIERpZCB5b3UgYXNzZW1i
bGUgaXQ/Iik7CgkJfSBlbHNlIHsKCQkJcmV0dXJuIF9leGNlcHRpb25IYW5kbGluZzsKCQl9Cgl9
Cn0KCnByaXZhdGUgc3RhdGljIFN0cmluZyBnZXRDYWxsZXJUeXBlKCkgewoJQ2FsbGVyVHlwZVN1
cHBsaWVyIGN0czsgCglzeW5jaHJvbml6ZWQgKGNhbGxlclR5cGVTdXBwbGllckxvY2spIHsKCQlj
dHMgPSBjYWxsZXJUeXBlU3VwcGxpZXI7Cgl9CglpZiAoY3RzID09IG51bGwpIHsKCQljdHMgPSBE
RUZBVUxUX0NBTExFUl9UWVBFX1NVUFBMSUVSOwoJfQoJcmV0dXJuIGN0cy5nZXQoKTsKfQoKcHVi
bGljIHN0YXRpYyB2b2lkIHNldENhbGxlclR5cGVTdXBwbGllcihDYWxsZXJUeXBlU3VwcGxpZXIg
cFN1cHBsaWVyKSB7CglzeW5jaHJvbml6ZWQgKGNhbGxlclR5cGVTdXBwbGllckxvY2spIHsKCQlj
YWxsZXJUeXBlU3VwcGxpZXIgPSBwU3VwcGxpZXI7Cgl9Cn0KCnByaXZhdGUgc3RhdGljIFN0cmlu
ZyBnZXRDYWxsZXJUeXBlQnlDYWxsaW5nU2VydmljZSgpIHsKCUlEYXRhIGlucHV0ID0gbnVsbDsK
CVN0cmluZyB0eXBlID0gIiI7CgkvLyBvdXRwdXQKCUlEYXRhIG91dHB1dCA9IElEYXRhRmFjdG9y
eS5jcmVhdGUoKTsKCXRyeSB7CgkJb3V0cHV0ID0gU2VydmljZS5kb0ludm9rZSggInd4LnJlc2ls
aWVuY2UuaW1wbC5jYWxsZXIiLCAiZ2V0Q2FsbGVyIiwgaW5wdXQgKTsKCQlJRGF0YU1hcCBvdXRw
dXRNYXAgPSBuZXcgSURhdGFNYXAob3V0cHV0KTsKCQlJRGF0YU1hcCBjYWxsZXJNYXAgPSBuZXcg
SURhdGFNYXAob3V0cHV0TWFwLmdldEFzSURhdGEoImNhbGxlciIpKTsKCQlyZXR1cm4gY2FsbGVy
TWFwLmdldEFzU3RyaW5nKCJ0eXBlIik7Cgl9IGNhdGNoIChFeGNlcHRpb24gZSkgewoJCXJldHVy
biB0eXBlOwoJfQkKfQoKCglwcml2YXRlIHN0YXRpYyBTdHJpbmcgZ2V0Q2FsbFN0YWNrQXNKU09O
U3RyaW5nKEFycmF5TGlzdDxJRGF0YUN1cnNvcj4gZXJyb3JJbmZvSGllcmFjaHkpIHsKCgkJSURh
dGFbXSBjYWxsU3RhY2sgPSBJRGF0YVV0aWwuZ2V0SURhdGFBcnJheShlcnJvckluZm9IaWVyYWNo
eS5nZXQoMCksIEVSUk9SX0lORk9fQ0FMTF9TVEFDSyk7CgkJCgkJU3RyaW5nIGpzb25TdHJpbmcg
PSAiIjsKCQkKCQlpZiAoY2FsbFN0YWNrICE9IG51bGwpIHsKCQkJLy8gaW5wdXQKCQkJSURhdGEg
aW5wdXQgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7CgkJCUlEYXRhQ3Vyc29yIGlucHV0Q3Vyc29y
ID0gaW5wdXQuZ2V0Q3Vyc29yKCk7CgoJCQkvLyBkb2N1bWVudAoJCQlJRGF0YSBkb2N1bWVudCA9
IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCQkJSURhdGFDdXJzb3IgZG9jdW1lbnRDdXJzb3IgPSBk
b2N1bWVudC5nZXRDdXJzb3IoKTsKCQkJSURhdGFVdGlsLnB1dChkb2N1bWVudEN1cnNvciwgImNh
bGxTdGFjayIsIGNhbGxTdGFjayk7CgkJCUlEYXRhVXRpbC5wdXQoaW5wdXRDdXJzb3IsICJkb2N1
bWVudCIsIGRvY3VtZW50KTsKCQkJSURhdGFVdGlsLnB1dChpbnB1dEN1cnNvciwgInByZXR0eVBy
aW50IiwgImZhbHNlIik7CgkJCWlucHV0Q3Vyc29yLmRlc3Ryb3koKTsKCgkJCS8vIG91dHB1dAoJ
CQlJRGF0YSBvdXRwdXQgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7CgkJCXRyeSB7CgkJCQlvdXRw
dXQgPSBTZXJ2aWNlLmRvSW52b2tlKCJwdWIuanNvbiIsICJkb2N1bWVudFRvSlNPTlN0cmluZyIs
IGlucHV0KTsKCQkJCUlEYXRhQ3Vyc29yIG91dHB1dEN1cnNvciA9IG91dHB1dC5nZXRDdXJzb3Io
KTsKCQkJCWpzb25TdHJpbmcgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKG91dHB1dEN1cnNvciwgImpz
b25TdHJpbmciKTsKCQkJCW91dHB1dEN1cnNvci5kZXN0cm95KCk7CgkJCX0gY2F0Y2ggKEV4Y2Vw
dGlvbiBlKSB7CgkJCQkvLyBJdCBpcyBwb3NzaWJsZSwgdGhhdCB0aGlzIHNlcnZpY2UgZG9lcyBu
b3QgZXhpc3RzIChXTTguMiBlbnZpcm9ubWVudHMvc3RvcmVzKS4KCQkJCS8vIFRyeSBhZ2FpbiB3
aXRoIFNlcnZpY2UgZnJvbSBXbUpTT04gcGFja2FnZToKCQkJCS8vIFRoaXMgYmxvY2sgY2FuIGJl
IGRlbGV0ZWQsIGlmIGV2ZXJ5IGVudmlyb25tZW50IGlzIG9uIFdNOS4wIQoJCQkJdHJ5IHsKCQkJ
CQlvdXRwdXQgPSBTZXJ2aWNlLmRvSW52b2tlKCJwdWIuanNvbiIsICJkb2N1bWVudFRvSlNPTiIs
IGlucHV0KTsKCQkJCQlJRGF0YUN1cnNvciBvdXRwdXRDdXJzb3IgPSBvdXRwdXQuZ2V0Q3Vyc29y
KCk7CgkJCQkJanNvblN0cmluZyA9IElEYXRhVXRpbC5nZXRTdHJpbmcob3V0cHV0Q3Vyc29yLCAi
anNvbiIpOwoJCQkJCW91dHB1dEN1cnNvci5kZXN0cm95KCk7CgkJCQl9IGNhdGNoIChFeGNlcHRp
b24gaW5uZXJFeCkgewoJCQkJfQoJCQl9CgkJfQoJCQoJCXJldHVybiBqc29uU3RyaW5nOwoJfQoJ
Cglwcml2YXRlIHN0YXRpYyBIYXNoTWFwPFN0cmluZywgU3RyaW5nPiBjcmVhdGVHZW5lcmljVmFs
dWVNYXAoRXhjZXB0aW9uSGFuZGxpbmdJbmZvIGhhbmRsaW5nLCBib29sZWFuIGJyZWFrUmV0cnlM
b29wKSB7CgkJSGFzaE1hcDxTdHJpbmcsIFN0cmluZz4gZ2VuZXJpY1ZhbHVlTWFwID0gbmV3IEhh
c2hNYXA8U3RyaW5nLCBTdHJpbmc+KCk7CgoJCS8vIGV2YWx1YXRlIGVycm9yVG9CZVRocm93bjoK
CQlTdHJpbmcgZXJyb3JUb0JlVGhyb3duID0gaGFuZGxpbmcuZ2V0RXJyb3JUb0JlVGhyb3duKCk7
CgkJCgkJaW50IHJldHJ5Q291bnQgPSBnZXRSZXRyeUNvdW50KCk7CgkJZ2VuZXJpY1ZhbHVlTWFw
LnB1dChFSERfQVRUUklCVVRFX1JFVFJZX0NPVU5ULCBTdHJpbmcudmFsdWVPZihyZXRyeUNvdW50
KSk7CgoJCVN0cmluZyBtYXhSZXRyeUF0dGVtcHRzU3RyaW5nID0gaGFuZGxpbmcuZ2V0TWF4UmV0
cnlBdHRlbXB0cygpOwoJCUludGVnZXIgbWF4UmV0cnlBdHRlbXB0cyA9IG51bGw7CgkJdHJ5IHsK
CQkJbWF4UmV0cnlBdHRlbXB0cyA9IEludGVnZXIudmFsdWVPZihtYXhSZXRyeUF0dGVtcHRzU3Ry
aW5nKTsKCQl9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gbmZlKSB7CgkJfQkJCQkJCQoJ
CQoJCWludCBtYXhSZXRyeUF0dGVtcHRzQmVmb3JlQWJvcnQgPSAwOwoJCVN0cmluZyBtYXhSZXRy
eUF0dGVtcHRzQmVmb3JlQ2FuY2VsUmV0cnlTdHJpbmcgPSBnZXRWYWx1ZUNvbmYoCgkJCQlNQVhf
UkVUUllfQVRURU1QVFNfQkVGT1JFX0NBTkNFTF9SRVRSWSwgV1hfUkVTSUxJRU5DRSwgInRydWUi
LAoJCQkJIiIsICIiLCAiIiwgIiIpOwkJCgkJdHJ5IHsKCQkJbWF4UmV0cnlBdHRlbXB0c0JlZm9y
ZUFib3J0ID0gSW50ZWdlci52YWx1ZU9mKG1heFJldHJ5QXR0ZW1wdHNCZWZvcmVDYW5jZWxSZXRy
eVN0cmluZyk7CgkJfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIG5mZSkge30KCgkJLy8g
RGV0ZXJtaW5lIGVycm9yVG9CZVRocm93biBhbmQgbWF4UmV0cnlBdHRlbXB0cyBhY2NvcmRpbmcg
dG8gcmV0cnkgY29uZmlndXJhdGlvbjoKCQlpZiAoYnJlYWtSZXRyeUxvb3ApIHsKCQkJLy8gYnJl
YWsgZW5kbGVzcyBsb29wIC0tPiBvdmVyd3JpdGUgd2l0aCBOT05FIG9yIEZBVEFMCgkJCWdlbmVy
aWNWYWx1ZU1hcC5wdXQoRUhEX0FUVFJJQlVURV9FUlJPUl9UT19CRV9USFJPV05fSUQsIEVSUk9S
X05PTkUuZXF1YWxzKGVycm9yVG9CZVRocm93bik/RVJST1JfTk9ORTpFUlJPUl9GQVRBTCk7CgkJ
CWdlbmVyaWNWYWx1ZU1hcC5wdXQoRUhEX0FUVFJJQlVURV9NQVhfUkVUUllfQVRURU1QVFMsIFN0
cmluZy52YWx1ZU9mKHJldHJ5Q291bnQpKTsKCQl9IGVsc2UgaWYgKG1heFJldHJ5QXR0ZW1wdHMg
IT0gbnVsbCAmJiBtYXhSZXRyeUF0dGVtcHRzID09IC0xICYmIHJldHJ5Q291bnQgPCBtYXhSZXRy
eUF0dGVtcHRzQmVmb3JlQWJvcnQpIHsKCQkJLy8gZW5kbGVzcyBsb29wIC0tPiBUUkFOU0lFTlQK
CQkJZ2VuZXJpY1ZhbHVlTWFwLnB1dChFSERfQVRUUklCVVRFX0VSUk9SX1RPX0JFX1RIUk9XTl9J
RCwgRVJST1JfVFJBTlNJRU5UKTsKCQkJZ2VuZXJpY1ZhbHVlTWFwLnB1dChFSERfQVRUUklCVVRF
X01BWF9SRVRSWV9BVFRFTVBUUywgbWF4UmV0cnlBdHRlbXB0c0JlZm9yZUNhbmNlbFJldHJ5U3Ry
aW5nKTsKCQl9IGVsc2UgewoJCQkvLyBsZXNzIHRoYW4gbWF4UmV0cnlBdHRlbXB0cyAtLT4gVFJB
TlNJRU5UCgkJCWlmIChtYXhSZXRyeUF0dGVtcHRzICE9IG51bGwgJiYgcmV0cnlDb3VudCA8IG1h
eFJldHJ5QXR0ZW1wdHMpIHsKCQkJCWdlbmVyaWNWYWx1ZU1hcC5wdXQoRUhEX0FUVFJJQlVURV9F
UlJPUl9UT19CRV9USFJPV05fSUQsIEVSUk9SX1RSQU5TSUVOVCk7CgkJCQlnZW5lcmljVmFsdWVN
YXAucHV0KEVIRF9BVFRSSUJVVEVfTUFYX1JFVFJZX0FUVEVNUFRTLCBtYXhSZXRyeUF0dGVtcHRz
U3RyaW5nKTsKCQkJfSBlbHNlIHsJCQkJCQoJCQkJIGlmIChFUlJPUl9OT05FLmVxdWFscyhlcnJv
clRvQmVUaHJvd24pKSB7CgkJCQkJIGdlbmVyaWNWYWx1ZU1hcC5wdXQoRUhEX0FUVFJJQlVURV9F
UlJPUl9UT19CRV9USFJPV05fSUQsIEVSUk9SX05PTkUpOwoJCQkJIH0gZWxzZSB7CgkJCQkJIC8v
IEZpbmFsIGJlaGF2aW9yIGZvciBhYm9ydAoJCQkJCSBnZW5lcmljVmFsdWVNYXAucHV0KEVIRF9B
VFRSSUJVVEVfRVJST1JfVE9fQkVfVEhST1dOX0lELCBFUlJPUl9GQVRBTCk7CgkJCQkgfQoJCQkJ
IC8vIG1heFJldHJ5QXR0ZW1wdHMgaXMgcmVhY2hlZCBvciB3YXMgbm90IGRlZmluZWQgKC0+IDAp
CgkJCQkgU3RyaW5nIG1heFJldHJ5QXR0ZW1wdHNSZXN1bHQgPSBtYXhSZXRyeUF0dGVtcHRzICE9
IG51bGwgPyBtYXhSZXRyeUF0dGVtcHRzU3RyaW5nIDogIjAiOwoJCQkJIGdlbmVyaWNWYWx1ZU1h
cC5wdXQoRUhEX0FUVFJJQlVURV9NQVhfUkVUUllfQVRURU1QVFMsIG1heFJldHJ5QXR0ZW1wdHNS
ZXN1bHQpOwoJCQl9CgkJfQoJCXJldHVybiBnZW5lcmljVmFsdWVNYXA7Cgl9CgkKCS8qKgoJICog
RmlsdGVycyB0aGUgZXJyb3IgaGllcmFyY2h5IGZvciB0aGUgZGVlcGVzdCBzZXJ2aWNlIC0tPiBz
aG93cwoJICogaW4gd2hpY2ggc2VydmljZSBvZiBvdXIgY29kZSB0aGUgZXJyb3Igb2NjdXJlZAoJ
ICogCgkgKiBAcGFyYW0gaGllcmFjaGljYWxFcnJvckluZm8KCSAqIEByZXR1cm4gdGhlIGxldmVs
IG9mIHRoZSBkZWVwZXN0IHNlcnZpY2UgbmFtZQoJICovCglwcml2YXRlIHN0YXRpYyBpbnQgZ2V0
RGVlcGVzdEFwcGxpY2F0aW9uU2VydmljZUxldmVsKEFycmF5TGlzdDxFcnJvckluZm8+IGhpZXJh
Y2hpY2FsRXJyb3JJbmZvKSB7CgkJU3RyaW5nIHNlcnZpY2UgPSBudWxsOwoJCWZvciAoaW50IGxl
dmVsID0gaGllcmFjaGljYWxFcnJvckluZm8uc2l6ZSgpIC0gMTsgbGV2ZWwgPiAwOyBsZXZlbC0t
KSB7CgkJCXNlcnZpY2UgPSBoaWVyYWNoaWNhbEVycm9ySW5mby5nZXQobGV2ZWwpLmdldFNlcnZp
Y2UoKTsKCQkJLy8gY3JlYXRlIG9mIExpc3Qgb2YgRmxvd25hbWVzIHRvIGlnbm9yZQoJCQlMaXN0
PFN0cmluZz4gaWdub3JlRmxvd3MgPSBBcnJheXMuYXNMaXN0KCJ3eC5yZXNpbGllbmNlLnB1Yi5y
ZXNpbGllbmNlOnRocm93RXJyb3IiLAoJCQkJCSAJCQkJCQkJCSJ3eC5yZXNpbGllbmNlLnB1Yi5y
ZXNpbGllbmNlOnRocm93RXJyb3JJZk5lY2Vzc2FyeSIsIAoJCQkJCQkJCQkJCQkJICJ3eC5yZXNp
bGllbmNlLnB1Yi5yZXNpbGllbmNlOnBvc3RQcm9jZXNzRm9yVG9wTGV2ZWxTZXJ2aWNlIik7CgkJ
CQoJCQkKCQkJCgkJCQoJCQkKCQkJaWYgKHNlcnZpY2UgIT0gbnVsbCAmJiAKCQkJCSFzZXJ2aWNl
LnN0YXJ0c1dpdGgoInB1Yi4iKSAmJgoJCQkJIXNlcnZpY2Uuc3RhcnRzV2l0aCgid20uIikgJiYg
CgkJCQkhaWdub3JlRmxvd3MuY29udGFpbnMoc2VydmljZSkKCQkJKSB7CgkJCQlyZXR1cm4gbGV2
ZWw7CgkJCX0KCQl9CgoJCXJldHVybiAwOwoJfQoKCQoJLyoqCgkgKiBMb2dzIG1lc3NhZ2UgZnJv
bSBhIGNhdGFsb2cuCgkgKiAKCSAqIEBwYXJhbSBhRmFjaWxpdHlLZXkKCSAqICAgICAgICAgICAg
ZGVmaW5lcyB0aGUgZmFjaWxpdHkgaW4gdGhlIGNhdGFsb2cKCSAqIEBwYXJhbSBhTWVzc2FnZUtl
eQoJICogICAgICAgICAgICBjb3JyZXNwb25kcyB3aXRoIHRoZSBtZXNzYWdlIGtleSBpbiB0aGUg
Y2F0YWxvZwoJICogQHBhcmFtIGFNZXNzYWdlUGFyYW1zCgkgKiAgICAgICAgICAgIGlmIG1lc3Nh
Z2UgaW4gdGhlIGNhdGFsb2cgaGFzIHBhcmFtZXRlcnMKCSAqIEB0aHJvd3MgU2VydmljZUV4Y2Vw
dGlvbgoJICogICAgICAgICAgICAgdGhyb3duIGlmIHRoZSBsb2dnaW5nIGZhaWxlZAoJICovCgkv
KnByaXZhdGUgc3RhdGljIHZvaWQgbG9nTWVzc2FnZUZyb21DYXRhbG9nKFN0cmluZyBhRmFjaWxp
dHlLZXksIFN0cmluZyBhTWVzc2FnZUtleSwgU3RyaW5nW10gYU1lc3NhZ2VQYXJhbXMpIHsKCQkv
LyBpbnB1dAoJCUlEYXRhIHRJbnB1dCA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCQlJRGF0YUN1
cnNvciBpbnB1dEN1cnNvciA9IHRJbnB1dC5nZXRDdXJzb3IoKTsKCQlJRGF0YVV0aWwucHV0KGlu
cHV0Q3Vyc29yLCAiZmFjaWxpdHlLZXkiLCBhRmFjaWxpdHlLZXkpOwoJCUlEYXRhVXRpbC5wdXQo
aW5wdXRDdXJzb3IsICJtZXNzYWdlS2V5IiwgYU1lc3NhZ2VLZXkpOwoJCgkJLy8gVGhlcmUgYXJl
IHNvbWUgbWVzc2FnZSBwYXJhbXMgcHJvdmlkZWQKCQlpZiAoYU1lc3NhZ2VQYXJhbXMubGVuZ3Ro
ID4gMCkgewoJCQlJRGF0YVV0aWwucHV0KGlucHV0Q3Vyc29yLCAibWVzc2FnZVBhcmFtcyIsIGFN
ZXNzYWdlUGFyYW1zKTsKCQl9CgkJaW5wdXRDdXJzb3IuZGVzdHJveSgpOwoJCgkJdHJ5IHsKCQkJ
U2VydmljZS5kb0ludm9rZSgid3gucmVzaWxpZW5jZS5pbXBsOiIsICJsb2dNZXNzYWdlRnJvbUNh
dGFsb2ciLCB0SW5wdXQpOwoJCX0gCgkJY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CgkJfQoJfSovCgoJ
Cglwcml2YXRlIHN0YXRpYyB2b2lkIHZhbGlkYXRlWE1MKCkgdGhyb3dzIFNlcnZpY2VFeGNlcHRp
b24gewoJCWxvZ0luZm8oIlZhbGlkYXRpbmcgdGhlIHN1bW1hcml6ZWQgZXJyb3IgaGFuZGxpbmci
KTsKCQlGaWxlIHhtbEZpbGUgPSBuZXcgRmlsZShTZXJ2ZXJBUEkuZ2V0UGFja2FnZUNvbmZpZ0Rp
cihXWF9SRVNJTElFTkNFKSArICIvIiArIFNVTU1BUklaRURfRVhDRVBUSU9OX0hBTkRMSU5HX0ZJ
TEUpOwoJCUZpbGUgc2NoZW1hRmlsZSA9IG5ldyBGaWxlKFNlcnZlckFQSS5nZXRQYWNrYWdlQ29u
ZmlnRGlyKFdYX1JFU0lMSUVOQ0UpICsgIi8iICsgRVhDRVBUSU9OX0hBTkRMSU5HX1hTRF9GSUxF
KTsKCQkKCQl0cnkgewoJCQkvLyAxLiBMb29rdXAgYSBmYWN0b3J5IGZvciB0aGUgVzNDIFhNTCBT
Y2hlbWEgbGFuZ3VhZ2UKCQkJU2NoZW1hRmFjdG9yeSBmYWN0b3J5ID0gU2NoZW1hRmFjdG9yeS5u
ZXdJbnN0YW5jZSgiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiKTsKCQkJLy8gMi4g
Q29tcGlsZSB0aGUgc2NoZW1hLgoJCQkvLyBIZXJlIHRoZSBzY2hlbWEgaXMgbG9hZGVkIGZyb20g
YSBqYXZhLmlvLkZpbGUsIGJ1dCB5b3UgY291bGQgdXNlCgkJCS8vIGEgamF2YS5uZXQuVVJMIG9y
IGEgamF2YXgueG1sLnRyYW5zZm9ybS5Tb3VyY2UgaW5zdGVhZC4KCQkJU2NoZW1hIHNjaGVtYSA9
IGZhY3RvcnkubmV3U2NoZW1hKHNjaGVtYUZpbGUpOwkKCQkJLy8gMy4gR2V0IGEgdmFsaWRhdG9y
IGZyb20gdGhlIHNjaGVtYS4KCQkJVmFsaWRhdG9yIHZhbGlkYXRvciA9IHNjaGVtYS5uZXdWYWxp
ZGF0b3IoKTsJCgkJCS8vIDQuIFBhcnNlIHRoZSBkb2N1bWVudCB5b3Ugd2FudCB0byBjaGVjay4K
CQkJU291cmNlIHNvdXJjZSA9IG5ldyBTdHJlYW1Tb3VyY2UoeG1sRmlsZSk7CQoJCQkvLyA1LiBD
aGVjayB0aGUgZG9jdW1lbnQKCQkJdmFsaWRhdG9yLnZhbGlkYXRlKHNvdXJjZSk7CgkJCWxvZ0lu
Zm8oeG1sRmlsZS5nZXROYW1lKCkgKyAiIGlzIHZhbGlkIik7CgkJfSAKCQljYXRjaCAoU0FYRXhj
ZXB0aW9ufElPRXhjZXB0aW9uIGV4KSB7CgkJCVN0cmluZyBtZXNzYWdlID0geG1sRmlsZS5nZXRO
YW1lKCkgKyAiIGlzIG5vdCB2YWxpZCBiZWNhdXNlIFxuIiArIGV4LmdldE1lc3NhZ2UoKTsKCQkJ
ZmluYWwgU2VydmljZUV4Y2VwdGlvbiBzZSA9IG5ldyBTZXJ2aWNlRXhjZXB0aW9uKG1lc3NhZ2Up
OwoJCQlzZS5pbml0Q2F1c2UoZXgpOwoJCQl0aHJvdyBzZTsKCQl9CQoJfQoKCXByaXZhdGUgc3Rh
dGljIFN0cmluZyBnZXRWYWx1ZUNvbmYoU3RyaW5nIGtleSwgU3RyaW5nIHd4Q29uZmlnUGtnTmFt
ZSwKCQkJU3RyaW5nIG5vU2VydmljZUV4Y2VwdGlvbiwgU3RyaW5nIHN1YnN0aXR1dGVWYXJpYWJs
ZXMsCgkJCVN0cmluZyBpZ25vcmVHbG9iYWxWYWx1ZXMsIFN0cmluZyBzY2FuQWxsQ29uZmlndXJh
dGlvbnMsCgkJCVN0cmluZyBub1ZhcmlhYmxlSW50ZXJwb2xhdGlvbikgewoJCVN0cmluZyBwcm9w
ZXJ0eVZhbHVlID0gIiAiOwoJCS8vIGlucHV0CgkJSURhdGEgY29uZmlnUGFyYW0gPSBJRGF0YUZh
Y3RvcnkuY3JlYXRlKCk7CgkJSURhdGFDdXJzb3IgY29uZmlnUGFyYW1DdXJzb3IgPSBjb25maWdQ
YXJhbS5nZXRDdXJzb3IoKTsKCQlJRGF0YVV0aWwucHV0KGNvbmZpZ1BhcmFtQ3Vyc29yLCAia2V5
Iiwga2V5KTsKCQlJRGF0YVV0aWwucHV0KGNvbmZpZ1BhcmFtQ3Vyc29yLCAid3hDb25maWdQa2dO
YW1lIiwgd3hDb25maWdQa2dOYW1lKTsKCQlJRGF0YVV0aWwucHV0KGNvbmZpZ1BhcmFtQ3Vyc29y
LCAibm9TZXJ2aWNlRXhjZXB0aW9uIiwKCQkJCW5vU2VydmljZUV4Y2VwdGlvbik7CgkJY29uZmln
UGFyYW1DdXJzb3IuZGVzdHJveSgpOwoJCgkJLy8gb3V0cHV0CgkJSURhdGEgY29uZmlnT3V0cHV0
ID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOwoJCXRyeSB7CgkJCWNvbmZpZ091dHB1dCA9IFNlcnZp
Y2UuZG9JbnZva2UoInd4LmNvbmZpZy5wdWIiLCAiZ2V0VmFsdWUiLAoJCQkJCWNvbmZpZ1BhcmFt
KTsKCQl9IGNhdGNoIChFeGNlcHRpb24gZSkgewoJCQlyZXR1cm4gcHJvcGVydHlWYWx1ZTsKCQl9
CgkJSURhdGFDdXJzb3IgY29uZmlnT3V0cHV0Q3Vyc29yID0gY29uZmlnT3V0cHV0LmdldEN1cnNv
cigpOwoJCXByb3BlcnR5VmFsdWUgPSBJRGF0YVV0aWwKCQkJCS5nZXRTdHJpbmcoY29uZmlnT3V0
cHV0Q3Vyc29yLCAicHJvcGVydHlWYWx1ZSIpOwoJCWNvbmZpZ091dHB1dEN1cnNvci5kZXN0cm95
KCk7CgkJbG9nRGVidWcoImdldFZhbHVlQ29uZiBmb3IgIiArIGtleSArICIgcmV0dXJuczogIiAr
IHByb3BlcnR5VmFsdWUpOwoJCXJldHVybiBwcm9wZXJ0eVZhbHVlOwoJfQoJCglwcml2YXRlIHN0
YXRpYyBpbnQgZ2V0UmV0cnlDb3VudCgpIHsKCQlJRGF0YSBpbnB1dCA9IG51bGw7CgkJLy8gb3V0
cHV0CgkJSURhdGEgb3V0cHV0ID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOwoJCXRyeSB7CgkJCW91
dHB1dCA9IFNlcnZpY2UuZG9JbnZva2UoInB1Yi5mbG93IiwgImdldFJldHJ5Q291bnQiLCBpbnB1
dCk7CgkJCUlEYXRhQ3Vyc29yIG91dHB1dEN1cnNvciA9IG91dHB1dC5nZXRDdXJzb3IoKTsKCQkJ
cmV0dXJuIEludGVnZXIucGFyc2VJbnQoSURhdGFVdGlsLmdldFN0cmluZyhvdXRwdXRDdXJzb3Is
ICJyZXRyeUNvdW50IikpOwoJCX0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CgkJCXJldHVybiAwOwoJ
CX0KCX0KCQoJLyoqCgkgKiBFeHRyYWN0cyBhbiBlcnJvciBoaWVyYXJjaHkgZm9yIGEgZ2l2ZW4g
ZXJyb3IgaGllcmFyY2h5IChub3JtYWxseSBvbmx5CgkgKiBmaWxsZWQgYnkgb25lIChyb290KSBl
cnJvcikuIFVzZXMgdGhlIGNhbGxTdGFjayBhbmQgdGhlIGRlZXBlc3QgZXJyb3JJbmZvIHRvIGJ1
aWxkIGhpZWFyY2h5LgoJICogCgkgKiBAcGFyYW0gcEVycm9ySGllcmFyY2h5CgkgKiAgICAgICAg
ICAgIC0gYXJyYXkgbGlzdCBvZiBJRGF0YUN1cnNvcnMgb24gcHViLmV2ZW50OmV4Y2VwdGlvbklu
Zm8KCSAqIEByZXR1cm4gZnVsbCBhcnJheSBsaXN0IGFycmF5IGxpc3Qgb2YgRXJyb3JJbmZvIG9u
CgkgKiAgICAgICAgIHB1Yi5ldmVudDpleGNlcHRpb25JbmZvLCBjb250YWluaW5nIGFsbCBlcnJv
cnMgZnJvbSByb290KDApIHRvCgkgKiAgICAgICAgIG9yaWdpbiAoc2l6ZSBvZiBhcnJheSBsaXN0
KQoJICovCglwcml2YXRlIHN0YXRpYyBBcnJheUxpc3Q8RXJyb3JJbmZvPiBleHRyYWN0RXJyb3JI
aWVyYXJjaHkoQXJyYXlMaXN0PElEYXRhQ3Vyc29yPiBwRXJyb3JIaWVyYXJjaHkpIHsJCgkJaWYg
KHBFcnJvckhpZXJhcmNoeSA9PSBudWxsKSB7CgkJCXJldHVybiBudWxsOwoJCX0KCQkKCQlJRGF0
YUN1cnNvciBkZWVwZXN0TmVzdGVkRXJyb3IgPSBnZXREZWVwZXN0TmVzdGVkRXJyb3IocEVycm9y
SGllcmFyY2h5KTsKCQkKCQkvLyBnZXQgY2FsbFN0YWNrIG9mIGVycm9yOgoJCUlEYXRhW10gY2Fs
bFN0YWNrID0gSURhdGFVdGlsLmdldElEYXRhQXJyYXkocEVycm9ySGllcmFyY2h5LmdldCgwKSwg
ImNhbGxTdGFjayIpOwoJCUFycmF5TGlzdDxFcnJvckluZm8+IGVycm9ySW5mb0xpc3QgPSBudWxs
OwoJCQoJCWlmIChjYWxsU3RhY2sgIT0gbnVsbCkgewoJCQllcnJvckluZm9MaXN0ID0gbmV3IEFy
cmF5TGlzdDxFcnJvckluZm8+KGNhbGxTdGFjay5sZW5ndGgpOwoJCQkKCQkJLy8gdXNlIHRoZSBl
cnJvciBhbmQgZXJyb3JUeXBlIG9mIHRoZSBkZWVwZXN0IGVycm9ySW5mbyB0byBkZXRlcm1pbmUg
dGhlIGVycm9yIGFuZCBlcnJvclR5cGUgb2YgZWFjaCBsZXZlbDoKCQkJU3RyaW5nIG5lc3RlZEVy
cm9yVHlwZSA9IElEYXRhVXRpbC5nZXRTdHJpbmcoZGVlcGVzdE5lc3RlZEVycm9yLCBFUlJPUl9J
TkZPX0VSUk9SX1RZUEUpOwoJCQlTdHJpbmcgbmVzdGVkRXJyb3IgPSBJRGF0YVV0aWwuZ2V0U3Ry
aW5nKGRlZXBlc3ROZXN0ZWRFcnJvciwgRVJST1JfSU5GT19FUlJPUik7CgoJCQkvLyB0aGUgY2Fs
bHN0YWNrIGlzIG9yZGVyZWQgaW52ZXJzZSEKCQkJZm9yIChpbnQgaSA9IGNhbGxTdGFjay5sZW5n
dGggLSAxIDsgaSA+PSAwOyBpLS0pIHsKCQkJCS8vIHVzZSB0aGUgc2VydmljZSBuYW1lcyBvZiB0
aGUgY2FsbHN0YWNrOgoJCQkJSURhdGFDdXJzb3IgY2FsbFN0YWNrQ3Vyc29yID0gY2FsbFN0YWNr
W2ldLmdldEN1cnNvcigpOwoJCQkJU3RyaW5nIHNlcnZpY2UgPSBJRGF0YVV0aWwuZ2V0U3RyaW5n
KGNhbGxTdGFja0N1cnNvciwgRVJST1JfSU5GT19DQUxMX1NUQUNLX1NFUlZJQ0UpOwoJCQkJU3Ry
aW5nIGZsb3dTdGVwID0gSURhdGFVdGlsLmdldFN0cmluZyhjYWxsU3RhY2tDdXJzb3IsIEVSUk9S
X0lORk9fQ0FMTF9TVEFDS19GTE9XX1NURVApOwoJCQkJaWYgKGZsb3dTdGVwID09IG51bGwgfHwg
Zmxvd1N0ZXAuZXF1YWxzKCIiKSkgewoJCQkJCWZsb3dTdGVwID0gIm4uYS4iOwoJCQkJfQoJCQkJ
CgkJCQllcnJvckluZm9MaXN0LmFkZChuZXcgRXJyb3JJbmZvKG5lc3RlZEVycm9yLCBuZXN0ZWRF
cnJvclR5cGUsIHNlcnZpY2UsIGZsb3dTdGVwKSk7CgkJCX0KCQl9CgkJcmV0dXJuIGVycm9ySW5m
b0xpc3Q7Cgl9CgkKCS8qKgoJICogR2V0cyB0aGUgZGVlcGVzdCBlcnJvciBpbiB0aGUgZXJyb3Ig
aGllcmFyY2h5CgkgKiAKCSAqIEBwYXJhbSBwRXJyb3JIaWVyYXJjaHkKCSAqICAgICAgICAgICAg
LSBhcnJheSBsaXN0IG9mIElEYXRhQ3Vyc29ycyBvbiBwdWIuZXZlbnQ6ZXhjZXB0aW9uSW5mbwoJ
ICogQHJldHVybiBjdXJzb3Igb2YgdGhlIGRlZXBlc3QgZXJyb3IKCSAqLwoJcHJpdmF0ZSBzdGF0
aWMgSURhdGFDdXJzb3IgZ2V0RGVlcGVzdE5lc3RlZEVycm9yKEFycmF5TGlzdDxJRGF0YUN1cnNv
cj4gcEVycm9ySGllcmFyY2h5KSB7CQkKCQkKCQlJRGF0YUN1cnNvciBuZXN0ZWRFcnJvciA9IHBF
cnJvckhpZXJhcmNoeS5nZXQoMCk7CgkJSURhdGFDdXJzb3IgY3VycmVudEVycm9yID0gbnVsbDsK
CQlJRGF0YSBuZXN0ZWRFcnJvcklEYXRhID0gbnVsbDsKCQlkbyB7CgkJCWN1cnJlbnRFcnJvciA9
IG5lc3RlZEVycm9yOwoJCQluZXN0ZWRFcnJvcklEYXRhID0gSURhdGFVdGlsLmdldElEYXRhKGN1
cnJlbnRFcnJvciwgRVJST1JfSU5GT19ORVNURURfRVJST1JfSUQpOwoJCQlpZiAobmVzdGVkRXJy
b3JJRGF0YSAhPSBudWxsKSB7CgkJCQluZXN0ZWRFcnJvciA9IG5lc3RlZEVycm9ySURhdGEuZ2V0
Q3Vyc29yKCk7CgkJCX0gZWxzZSB7CgkJCQluZXN0ZWRFcnJvciA9IG51bGw7CgkJCX0KCQl9IHdo
aWxlIChuZXN0ZWRFcnJvciAhPSBudWxsKTsKCgkJcmV0dXJuIGN1cnJlbnRFcnJvcjsKCgl9CQoK
CS8qcHVibGljIHN0YXRpYyBjbGFzcyBMb2cgewoJCXByaXZhdGUgc3RhdGljIGZpbmFsIExvZyBJ
TlNUQU5DRSA9IG5ldyBMb2coKTsKCQlwcml2YXRlIHN0YXRpYyBmaW5hbCBib29sZWFuIGxvZ2dp
bmcgPSBmYWxzZTsKCgkJcHVibGljIHN0YXRpYyB2b2lkIGluaXQoKSB7CgkJCWlmIChsb2dnaW5n
KSB7CgkJCQlJTlNUQU5DRS5pbml0V3JpdGVyKCk7CgkJCX0KCQl9CgkJcHVibGljIHN0YXRpYyB2
b2lkIHdyaXRlKFN0cmluZyBwTWVzc2FnZSkgewoJCQlpZiAobG9nZ2luZykgewoJCQkJSU5TVEFO
Q0UubG9nKHBNZXNzYWdlKTsKCQkJfQoJCX0KCQlwdWJsaWMgc3RhdGljIHZvaWQgY2xvc2UoKSB7
CgkJCWlmIChsb2dnaW5nKSB7CgkJCQlJTlNUQU5DRS5jbG9zZVdyaXRlcigpOwoJCQl9CgkJfQoJ
CXB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc0xvZ2dpbmcoKSB7CgkJCXJldHVybiBsb2dnaW5nOwoJ
CX0KCgkJcHJpdmF0ZSBib29sZWFuIGluaXRpYWxpemVkOwoJCXByaXZhdGUgdm9pZCBpbml0V3Jp
dGVyKCkgewoJCQlpbml0aWFsaXplZCA9IHRydWU7CgkJfQoJCXByaXZhdGUgdm9pZCBjbG9zZVdy
aXRlcigpIHsKCQkJaW5pdGlhbGl6ZWQgPSBmYWxzZTsKCQl9CgkJcHJpdmF0ZSB2b2lkIGxvZyhT
dHJpbmcgcE1lc3NhZ2UpIHsKCQkJaWYgKGluaXRpYWxpemVkKSB7CgkJCQkvLyBUT0RPOgoJCQkJ
Ly9Mb2cubG9nVHJhY2VNZXNzYWdlKCJFSEYiLCBwTWVzc2FnZSk7CgkJCX0KCQl9Cgl9Ki8KCXB1
YmxpYyBzdGF0aWMgY2xhc3MgRXJyb3JIYW5kbGluZ0V4Y2VwdGlvbiBleHRlbmRzIFJ1bnRpbWVF
eGNlcHRpb24gewoJCXByaXZhdGUgc3RhdGljIGZpbmFsIGxvbmcgc2VyaWFsVmVyc2lvblVJRCA9
IC0zOTUwMTAwNzQxNjM2NDc5NjgxTDsKCgkJcHVibGljIEVycm9ySGFuZGxpbmdFeGNlcHRpb24o
U3RyaW5nIHBNc2csIFRocm93YWJsZSBwQ2F1c2UpIHsKCQkJc3VwZXIocE1zZywgcENhdXNlKTsK
CQl9CgoJCXB1YmxpYyBFcnJvckhhbmRsaW5nRXhjZXB0aW9uKFN0cmluZyBwTXNnKSB7CgkJCXN1
cGVyKHBNc2cpOwoJCX0KCgkJcHVibGljIEVycm9ySGFuZGxpbmdFeGNlcHRpb24oVGhyb3dhYmxl
IHBDYXVzZSkgewoJCQlzdXBlcihwQ2F1c2UpOwoJCX0KCX0KCglwdWJsaWMgc3RhdGljIGNsYXNz
IEV4Y2VwdGlvbkhhbmRsaW5nSW5mbyB7CgkJLy8gT2xkIHJlcHJlc2VudGF0aW9uIG9mIEV4Y2Vw
dGlvbkhhbmRsaW5nSW5mbyAoZGVwcmVjYXRlZCkKCQlwcml2YXRlIGZpbmFsIExpc3Q8U3RyaW5n
PiBzZXJ2aWNlTmFtZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsKCQlwcml2YXRlIGZpbmFsIFN0cmlu
ZyAgZXJyb3JUb0JlVGhyb3duLCB0eXBlLCBlcnJvckNvZGUsIGV4Y2VwdGlvblR5cGUsIG1heFJl
dHJ5QXR0ZW1wdHM7CgkJcHJpdmF0ZSBmaW5hbCBib29sZWFuIHByaW50QnVzaW5lc3NPYmplY3Q7
CgkJcHVibGljIEV4Y2VwdGlvbkhhbmRsaW5nSW5mbyhTdHJpbmcgcEVycm9yVG9CZVRocm93biwg
U3RyaW5nIHBUeXBlLCBTdHJpbmcgcEVycm9yQ29kZSwKCQkJCSAJCQkJCSBTdHJpbmcgcEV4Y2Vw
dGlvblR5cGUsIFN0cmluZyBwTWF4UmV0cnlBdHRlbXB0cywKCQkJCSAJCQkJCSBib29sZWFuIHBQ
cmludEJ1c2luZXNzT2JqZWN0KSB7CgkJCWVycm9yVG9CZVRocm93biA9IHBFcnJvclRvQmVUaHJv
d247CgkJCXR5cGUgPSBwVHlwZTsKCQkJZXJyb3JDb2RlID0gcEVycm9yQ29kZTsKCQkJZXhjZXB0
aW9uVHlwZSA9IHBFeGNlcHRpb25UeXBlOwoJCQltYXhSZXRyeUF0dGVtcHRzID0gcE1heFJldHJ5
QXR0ZW1wdHM7CgkJCXByaW50QnVzaW5lc3NPYmplY3QgPSBwUHJpbnRCdXNpbmVzc09iamVjdDsK
CQl9CgoJCXB1YmxpYyBMaXN0PFN0cmluZz4gZ2V0SGFuZGxpbmdTZXJ2aWNlcygpIHsKCQkJcmV0
dXJuIHNlcnZpY2VOYW1lczsKCQl9CgoJCXB1YmxpYyB2b2lkIGFkZFNlcnZpY2VOYW1lKFN0cmlu
ZyBwU2VydmljZU5hbWUpIHsKCQkJc2VydmljZU5hbWVzLmFkZChwU2VydmljZU5hbWUpOwoJCX0K
CgkJcHVibGljIFN0cmluZyBnZXRFcnJvclRvQmVUaHJvd24oKSB7CgkJCXJldHVybiBlcnJvclRv
QmVUaHJvd247CgkJfQoKCQlwdWJsaWMgU3RyaW5nIGdldFR5cGUoKSB7CgkJCXJldHVybiB0eXBl
OwoJCX0KCgkJcHVibGljIFN0cmluZyBnZXRFcnJvckNvZGUoKSB7CgkJCXJldHVybiBlcnJvckNv
ZGU7CgkJfQoKCQlwdWJsaWMgU3RyaW5nIGdldEV4Y2VwdGlvblR5cGUoKSB7CgkJCXJldHVybiBl
eGNlcHRpb25UeXBlOwoJCX0KCgkJcHVibGljIFN0cmluZyBnZXRNYXhSZXRyeUF0dGVtcHRzKCkg
ewoJCQlyZXR1cm4gbWF4UmV0cnlBdHRlbXB0czsKCQl9CgoJCXB1YmxpYyBib29sZWFuIGlzUHJp
bnRCdXNpbmVzc09iamVjdCgpIHsKCQkJcmV0dXJuIHByaW50QnVzaW5lc3NPYmplY3Q7CgkJfQoK
CQlAT3ZlcnJpZGUKCQlwdWJsaWMgU3RyaW5nIHRvU3RyaW5nKCkgewoJCQlmaW5hbCBTdHJpbmdC
dWlsZGVyIHNiID0gbmV3IFN0cmluZ0J1aWxkZXIoKTsKCQkJc2IuYXBwZW5kKHN1cGVyLnRvU3Ry
aW5nKCkpOwoJCQlzYi5hcHBlbmQoIjogZXJyb3JUb0JlVGhyb3duPSAiKTsKCQkJc2IuYXBwZW5k
KGVycm9yVG9CZVRocm93bik7CgkJCXNiLmFwcGVuZCgiLCB0eXBlPSIpOwoJCQlzYi5hcHBlbmQo
dHlwZSk7CgkJCXNiLmFwcGVuZCgiZXJyb3JDb2RlPSIpOwoJCQlzYi5hcHBlbmQoZXJyb3JDb2Rl
KTsKCQkJc2IuYXBwZW5kKCIsIGV4Y2VwdGlvblR5cGU9Iik7CgkJCXNiLmFwcGVuZChleGNlcHRp
b25UeXBlKTsKCQkJc2IuYXBwZW5kKCIsIG1heFJldHJ5QXR0ZW1wdHM9Iik7CgkJCXNiLmFwcGVu
ZChtYXhSZXRyeUF0dGVtcHRzKTsKCQkJc2IuYXBwZW5kKCIsIHByaW50QnVzaW5lc3NPYmplY3Q9
Iik7CgkJCXNiLmFwcGVuZChwcmludEJ1c2luZXNzT2JqZWN0KTsKCQkJc2IuYXBwZW5kKCIsIHNl
cnZpY2VOYW1lcz0iKTsKCQkJLy8gVE9ETzoKCQkJLy9zYi5hcHBlbmQoU3RyaW5ncy5hc1N0cmlu
ZyhzZXJ2aWNlTmFtZXMpKTsKCQkJcmV0dXJuIHNiLnRvU3RyaW5nKCk7CgkJfQoJCQoJfQoJCgkv
KioKCSAqIEV4dHJhY3QgaGFuZGxpbmdzIGZvciBhbiBlcnJvciBhdCBhIGxvY2F0aW9uIGZyb20g
YSBnaXZlbiBleGNlcHRpb24KCSAqIGhhbmRsaW5nIGRlZmluaXRpb24KCSAqIAoJICogQHBhcmFt
IHBFcnJvckhhbmRsaW5nCgkgKiAgICAgICAgICAgIGRlZmluaXRpb24gYXMgRE9NIGRvY3VtZW50
IHRvIHVzZSBmb3IgZXh0cmFjdGlvbgoJICogQHBhcmFtIHBMb2NhdGlvblhQYXRoCgkgKiAgICAg
ICAgICAgIGVycm9yIGxvY2F0aW9uIGFzIFhQQVRICgkgKiBAcGFyYW0gcEV4Y2VwdGlvblR5cGUK
CSAqICAgICAgICAgICAgZXJyb3IgdHlwZSBhcyBTdHJpbmcKCSAqIEBwYXJhbSBjdXJyZW50Q2Fs
bGVyVHlwZQoJICogICAgICAgICAgICBjYWxsZXIgdHlwZSBhcyBTdHJpbmcJCgkgKiBAcGFyYW0g
Y3VycmVudEVycm9yTWVzc2FnZQoJICogICAgICAgICAgICBvcmlnaW5hbCBlcnJvciBhcyBTdHJp
bmcgCgkgKiBAcmV0dXJuIGFsbCBmb3VuZCBoYW5kbGluZ3MgZm9yIHRoZSBnaXZlbiBlcnJvciBh
cyBhbiBhcnJheSBsaXN0LCBlbXB0eQoJICogICAgICAgICBsaXN0IGluIGNhc2Ugb2Ygbm8gZm91
bmQgZXJyb3IKCSAqIEB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbgoJICovCglAU3VwcHJlc3NXYXJu
aW5ncygidW5jaGVja2VkIikKCXByaXZhdGUgc3RhdGljIEV4Y2VwdGlvbkhhbmRsaW5nSW5mbyBn
ZXRIYW5kbGluZ3NGb3JMb2NhdGlvbigKCQkJRG9jdW1lbnQgcEVycm9ySGFuZGxpbmcsIFN0cmlu
ZyBwTG9jYXRpb25YUGF0aCwKCQkJU3RyaW5nIHBFeGNlcHRpb25UeXBlLCBTdHJpbmcgY3VycmVu
dENhbGxlclR5cGUsIFN0cmluZyBjdXJyZW50RXJyb3JNZXNzYWdlKQoJCQl0aHJvd3MgU2Vydmlj
ZUV4Y2VwdGlvbiB7CgkJbG9nRGVidWcoImdldEhhbmRsaW5nc0ZvckxvY2F0aW9uOiAtLT4gIiAr
IHBMb2NhdGlvblhQYXRoICsgIiwgIiArIHBFeGNlcHRpb25UeXBlICsgIiwgIiArIGN1cnJlbnRD
YWxsZXJUeXBlICsgIiwgIiArIGN1cnJlbnRFcnJvck1lc3NhZ2UpOwoKCQkvLyBnZXQgZXhjZXB0
aW9uIGxpc3QgZm9yIGxvY2F0aW9uCgkJTGlzdDxFbGVtZW50PiBleGNlcHRpb25Ob2RlcyA9IG51
bGw7CgkJdHJ5IHsKCQkJZXhjZXB0aW9uTm9kZXMgPSAoTGlzdDxFbGVtZW50PikgWFBhdGguc2Vs
ZWN0Tm9kZXMocEVycm9ySGFuZGxpbmcsIHBMb2NhdGlvblhQYXRoKTsKCQl9IAoJCWNhdGNoIChK
RE9NRXhjZXB0aW9uIGUpIHsKCQkJbG9nRXJyb3IoIkpET00gRXJyb3IgZHVyaW5nIGV4dHJhY3Rp
b24gb2YgZXJyb3IgdHlwZXMgZnJvbSBleGNlcHRpb24gaGFuZGxpbmcgZGVmaW5pdGlvbjogIiAr
IGUuZ2V0TWVzc2FnZSgpKTsKCQkJbG9nRGVidWcoImdldEhhbmRsaW5nc0ZvckxvY2F0aW9uOiA8
LS0gbnVsbCAoSkRPTUV4Y2VwdGlvbjogIiArIGUuZ2V0TWVzc2FnZSgpICsgIikiKTsKCQkJcmV0
dXJuIG51bGw7CgkJfQogICAgICAgIC8vIGNoZWNrIGV4Y2VwdGlvbiBub2RlcyBzYW5pdHkKCQlp
ZiAoZXhjZXB0aW9uTm9kZXMgPT0gbnVsbCB8fCBleGNlcHRpb25Ob2Rlcy5pc0VtcHR5KCkpIHsK
CQkJbG9nRGVidWcoImdldEhhbmRsaW5nc0ZvckxvY2F0aW9uOiA8LS0gbnVsbCAoTm8gZXhjZXB0
aW9uTm9kZXMpIik7CgkJCXJldHVybiBudWxsOwoJCX0JCQkKCQkKCQkvLyBleHRyYWN0IGV4Y2Vw
dGlvbnMgZnJvbSBsaXN0LCBpZiBsb2NhdGlvbiBleGlzdHMgYW5kIGV4Y2VwdGlvbgoJCS8vIGRl
ZmluaXRpb25zIGFyZSBjb250YWluZWQKCQkvLyBpdGVyYXRpb24gb3ZlciBhbGwgZGVmaW5lZCBl
eGNlcHRpb25zIGluIGxvY2F0aW9uCgkJRXhjZXB0aW9uSGFuZGxpbmdJbmZvIGV4Y2VwdGlvbkhh
bmRsaW5nSW5mbyA9IG51bGw7CgkJRWxlbWVudCBleGNlcHRpb25IYW5kbGluZ0VsZW1lbnQgPSBu
dWxsOwoJCWZvciAoRWxlbWVudCBleGNlcHRpb25Ob2RlIDogZXhjZXB0aW9uTm9kZXMpIHsKCQkJ
Ym9vbGVhbiBpc0Vycm9yTWVzc2FnZUNvbnRhaW5zQ2hlY2tUcnVlID0gZmFsc2U7CgkJCWZpbmFs
IFN0cmluZyBlcnJvck1lc3NhZ2VDb250YWluc0Zyb21EZWZpbml0aW9uID0gZXhjZXB0aW9uTm9k
ZS5nZXRBdHRyaWJ1dGVWYWx1ZShFSERfQVRUUklCVVRFX0VSUk9SX01FU1NBR0VfQ09OVEFJTlMp
OwoJCQlpZiAoZXJyb3JNZXNzYWdlQ29udGFpbnNGcm9tRGVmaW5pdGlvbiA9PSBudWxsIHx8CgkJ
CQkoY3VycmVudEVycm9yTWVzc2FnZSAhPSBudWxsICYmCgkJCQllcnJvck1lc3NhZ2VDb250YWlu
c0Zyb21EZWZpbml0aW9uICE9IG51bGwgJiYKCQkJCWN1cnJlbnRFcnJvck1lc3NhZ2UuY29udGFp
bnMoZXJyb3JNZXNzYWdlQ29udGFpbnNGcm9tRGVmaW5pdGlvbikpKSAKCQkJewoJCQkJaXNFcnJv
ck1lc3NhZ2VDb250YWluc0NoZWNrVHJ1ZSA9IHRydWU7CgkJCX0KCgkJCS8vIENoZWNrIGZvciBv
cHRpb25hbCBhdHRyaWJ1dCBlcnJvck1lc3NhZ2VSZWdleDoKCQkJYm9vbGVhbiBpc0Vycm9yTWVz
c2FnZVJlZ2V4Q2hlY2tUcnVlID0gZmFsc2U7CgkJCWZpbmFsIFN0cmluZyBlcnJvck1lc3NhZ2VS
ZWdleEZyb21EZWZpbml0aW9uID0gZXhjZXB0aW9uTm9kZS5nZXRBdHRyaWJ1dGVWYWx1ZShFSERf
QVRUUklCVVRFX0VSUk9SX01FU1NBR0VfUkVHRVhfSUQpOwoJCQlpZiAoZXJyb3JNZXNzYWdlUmVn
ZXhGcm9tRGVmaW5pdGlvbiA9PSBudWxsIHx8CgkJCQkoY3VycmVudEVycm9yTWVzc2FnZSAhPSBu
dWxsICYmCgkJCQllcnJvck1lc3NhZ2VSZWdleEZyb21EZWZpbml0aW9uICE9IG51bGwgJiYKCQkJ
CWN1cnJlbnRFcnJvck1lc3NhZ2UubWF0Y2hlcyhlcnJvck1lc3NhZ2VSZWdleEZyb21EZWZpbml0
aW9uKSkpIAoJCQl7CgkJCQlpc0Vycm9yTWVzc2FnZVJlZ2V4Q2hlY2tUcnVlID0gdHJ1ZTsKCQkJ
fQoJCQkKCQkJLy8gQ2hlY2sgZm9yIG9wdGlvbmFsIGF0dHJpYnV0IGNhbGxlclR5cGU6CgkJCWJv
b2xlYW4gaXNDYWxsZXJUeXBlQ2hlY2tUcnVlID0gZmFsc2U7CgkJCWZpbmFsIFN0cmluZyBjYWxs
ZXJUeXBlRnJvbURlZmluaXRpb24gPSBleGNlcHRpb25Ob2RlLmdldEF0dHJpYnV0ZVZhbHVlKEVI
RF9BVFRSSUJVVEVfRVJST1JfQ0FMTEVSX1RZUEVfSUQpOwoJCQlpZiAoY2FsbGVyVHlwZUZyb21E
ZWZpbml0aW9uID09IG51bGwgfHwKCQkJCShjdXJyZW50Q2FsbGVyVHlwZSAhPSBudWxsICYmCgkJ
CQljYWxsZXJUeXBlRnJvbURlZmluaXRpb24gIT0gbnVsbCAmJgoJCQkJY3VycmVudENhbGxlclR5
cGUuZXF1YWxzKGNhbGxlclR5cGVGcm9tRGVmaW5pdGlvbikpKSAKCQkJewoJCQkJaXNDYWxsZXJU
eXBlQ2hlY2tUcnVlID0gdHJ1ZTsKCQkJfQoJCQkKCQkJLy8gaWYgZGVmaW5lZCBleGNlcHRpb24g
dHlwZSBlcXVhbHMgZXhjZXB0aW9uLCBzZXQgaGFuZGxpbmcgYW5kCgkJCS8vIGV4aXQgbG9vcAoJ
CQlmaW5hbCBTdHJpbmcgZXhjZXB0aW9uVHlwZUZyb21EZWZpbml0aW9uID0gZXhjZXB0aW9uTm9k
ZS5nZXRBdHRyaWJ1dGVWYWx1ZShFSERfQVRUUklCVVRFX0VSUk9SX1RZUEVfSUQpOwoJCQlpZiAo
ZXhjZXB0aW9uVHlwZUZyb21EZWZpbml0aW9uLmVxdWFscyhwRXhjZXB0aW9uVHlwZSkgJiYgaXNF
cnJvck1lc3NhZ2VDb250YWluc0NoZWNrVHJ1ZSAmJiBpc0Vycm9yTWVzc2FnZVJlZ2V4Q2hlY2tU
cnVlICYmIGlzQ2FsbGVyVHlwZUNoZWNrVHJ1ZSkgewoJCQkJZXhjZXB0aW9uSGFuZGxpbmdJbmZv
ID0gZ2V0UmV0VmFsKGV4Y2VwdGlvbk5vZGUsIHBFeGNlcHRpb25UeXBlKTsKCQkJCWV4Y2VwdGlv
bkhhbmRsaW5nRWxlbWVudCA9IGV4Y2VwdGlvbk5vZGU7CgkJCQlicmVhazsKCQkJfQkKCQkJICAK
CQkJLy8gaWYgZ2VuZXJpYyBoYW5kbGluZyBpcyBhbGxvd2VkIGFuZCBkZWZpbmVkICh0eXBlPSJh
bGwiKSwgc2V0IChjYWNoZSkKCQkJLy8gZ2VuZXJpYyBoYW5kbGluZwoJCQllbHNlIGlmIChleGNl
cHRpb25UeXBlRnJvbURlZmluaXRpb24uZXF1YWxzKEVIRF9WQUxVRV9HRU5FUklDX0VSUk9SX1RZ
UEVfSUQpICYmIGlzRXJyb3JNZXNzYWdlQ29udGFpbnNDaGVja1RydWUgJiYgaXNFcnJvck1lc3Nh
Z2VSZWdleENoZWNrVHJ1ZSAmJiBpc0NhbGxlclR5cGVDaGVja1RydWUpIHsKCQkJCWV4Y2VwdGlv
bkhhbmRsaW5nSW5mbyA9IGdldFJldFZhbChleGNlcHRpb25Ob2RlLCBwRXhjZXB0aW9uVHlwZSk7
CgkJCQlleGNlcHRpb25IYW5kbGluZ0VsZW1lbnQgPSBleGNlcHRpb25Ob2RlOwoJCQkJYnJlYWs7
CgkJCX0KCQl9CgoJCWlmIChleGNlcHRpb25IYW5kbGluZ0VsZW1lbnQgPT0gbnVsbCkgewoJCQly
ZXR1cm4gbnVsbDsKCQl9IGVsc2UgewoJCQkvLyBjaGVjayBoYW5kbGluZyBub2RlcyBzYW5pdHkK
CQkJZm9yIChPYmplY3QgbiA6IGV4Y2VwdGlvbkhhbmRsaW5nRWxlbWVudC5nZXRDaGlsZHJlbihF
SERfQVRUUklCVVRFX0hBTkRMSU5HKSkgewoJCQkJCWV4Y2VwdGlvbkhhbmRsaW5nSW5mby5hZGRT
ZXJ2aWNlTmFtZSgoKEVsZW1lbnQpIG4pLmdldFRleHQoKSk7CgkJCX0KCgkJCWxvZ0RlYnVnKCJn
ZXRIYW5kbGluZ3NGb3JMb2NhdGlvbjogPC0tICIgKyBleGNlcHRpb25IYW5kbGluZ0luZm8pOwoJ
CQlyZXR1cm4gZXhjZXB0aW9uSGFuZGxpbmdJbmZvOwoJCX0KCQkKCX0KCQoJcHJpdmF0ZSBzdGF0
aWMgRXhjZXB0aW9uSGFuZGxpbmdJbmZvIGdldFJldFZhbChFbGVtZW50IGV4Y2VwdGlvbk5vZGUs
IFN0cmluZyBleGNlcHRpb25UeXBlKSB7CQoJCWZpbmFsIFN0cmluZyBlcnJvclRvQmVUaHJvd24g
PSBleGNlcHRpb25Ob2RlLmdldEF0dHJpYnV0ZVZhbHVlKEVIRF9BVFRSSUJVVEVfRVJST1JfVE9f
QkVfVEhST1dOX0lEKTsKCQlmaW5hbCBTdHJpbmcgdHlwZSA9IGV4Y2VwdGlvbk5vZGUuZ2V0QXR0
cmlidXRlVmFsdWUoRUhEX0FUVFJJQlVURV9FUlJPUl9UWVBFX0lEKTsKCQlmaW5hbCBTdHJpbmcg
ZXhjZXB0aW9uSGFuZGxpbmdJZCA9IGV4Y2VwdGlvbk5vZGUuZ2V0QXR0cmlidXRlVmFsdWUoRUhE
X0FUVFJJQlVURV9FUlJPUl9IQU5ETElOR19JRF9JRCk7CgkJZmluYWwgU3RyaW5nIG1heFJldHJ5
QXR0ZW1wdHMgPSBleGNlcHRpb25Ob2RlLmdldEF0dHJpYnV0ZVZhbHVlKEVIRF9BVFRSSUJVVEVf
TUFYX1JFVFJZX0FUVEVNUFRTKTsKCQlmaW5hbCBTdHJpbmcgcHJpbnRCdXNpbmVzc09iamVjdFN0
ciA9IGV4Y2VwdGlvbk5vZGUuZ2V0QXR0cmlidXRlVmFsdWUoRUhEX1BSSU5UX0JVU0lORVNTX09C
SkVDVF9JRCk7CgkJZmluYWwgYm9vbGVhbiBwcmludEJ1c2luZXNzT2JqZWN0ID0gcHJpbnRCdXNp
bmVzc09iamVjdFN0ciA9PSBudWxsID8gZmFsc2UgOiBCb29sZWFuLnBhcnNlQm9vbGVhbihwcmlu
dEJ1c2luZXNzT2JqZWN0U3RyKTsKCQlyZXR1cm4gbmV3IEV4Y2VwdGlvbkhhbmRsaW5nSW5mbyhl
cnJvclRvQmVUaHJvd24sIHR5cGUsIGV4Y2VwdGlvbkhhbmRsaW5nSWQsIGV4Y2VwdGlvblR5cGUs
IG1heFJldHJ5QXR0ZW1wdHMsIHByaW50QnVzaW5lc3NPYmplY3QpOwoJfQoJCgoJcHJpdmF0ZSBz
dGF0aWMgSURhdGEgYnVpbGRDb21wYWN0RXJyb3JJbmZvKFN0cmluZyBwRXJyb3JMb2NhdGlvbiwg
U3RyaW5nIGZsb3dTdGVwKSB7CgkJSURhdGEgY29tcGFjdEVycm9ySW5mbyA9IElEYXRhRmFjdG9y
eS5jcmVhdGUoKTsKCQlJRGF0YUN1cnNvciBjb21wYWN0RXJyb3JJbmZvQ3Vyc29yID0gY29tcGFj
dEVycm9ySW5mby5nZXRDdXJzb3IoKTsKCgkJSURhdGFVdGlsLnB1dChjb21wYWN0RXJyb3JJbmZv
Q3Vyc29yLCBDT01QQUNUX0VSUk9SX0xPQ0FUSU9OX0lELCBwRXJyb3JMb2NhdGlvbik7CgkJSURh
dGFVdGlsLnB1dChjb21wYWN0RXJyb3JJbmZvQ3Vyc29yLCBDT01QQUNUX0VSUk9SX0ZMT1dfU1RF
UCwgZmxvd1N0ZXApOwoKCQljb21wYWN0RXJyb3JJbmZvQ3Vyc29yLmRlc3Ryb3koKTsKCgkJcmV0
dXJuIGNvbXBhY3RFcnJvckluZm87Cgl9CgkJCglAU3VwcHJlc3NXYXJuaW5ncygicmF3dHlwZXMi
KQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgTlNTZXJ2aWNlIGdldEN1cnJlbnRUb3BMZXZlbFNlcnZp
Y2UoKSB7CgkJTlNTZXJ2aWNlIHRvcExldmVsU2VydmljZU5hbWUgPSBudWxsOwoJCUludm9rZVN0
YXRlIHN0YXRlID0gSW52b2tlU3RhdGUuZ2V0Q3VycmVudFN0YXRlKCk7CgkJaWYgKHN0YXRlICE9
IG51bGwpIHsKCQkJU3RhY2sgY2FsbFN0YWNrID0gc3RhdGUuZ2V0Q2FsbFN0YWNrKCk7CgkJCWlm
IChjYWxsU3RhY2sgIT0gbnVsbCAmJiBjYWxsU3RhY2suc2l6ZSgpID4gMCkgewoJCQkJdG9wTGV2
ZWxTZXJ2aWNlTmFtZSA9IChOU1NlcnZpY2UpIGNhbGxTdGFjay5lbGVtZW50QXQoMCk7CgkJCX0K
CQl9CgkJcmV0dXJuIHRvcExldmVsU2VydmljZU5hbWU7Cgl9CgkKCXByaXZhdGUgc3RhdGljIGZp
bmFsIFN0cmluZyBnZXRNZXNzYWdlVUlEKElEYXRhIG1ldGFEYXRhKSB7CgkJaWYobWV0YURhdGEg
IT0gbnVsbCkgewoJCQlJRGF0YU1hcCBtZXRhRGF0YU1hcCA9IG5ldyBJRGF0YU1hcChtZXRhRGF0
YSk7CgkJCXJldHVybiBtZXRhRGF0YU1hcC5nZXRBc1N0cmluZyhVSURfSUQpOwoJCX0KCQlyZXR1
cm4gbnVsbDsKCX0KCglwdWJsaWMgc3RhdGljIHZvaWQgaW5pdEhhbmRsaW5ncyhVUkwgcFVybCwg
U0FYQnVpbGRlciBwQnVpbGRlcikgewoJCWZpbmFsIFNBWEJ1aWxkZXIgYnVpbGRlcjsKCQlpZiAo
cEJ1aWxkZXIgPT0gbnVsbCkgewoJCQlidWlsZGVyID0gbmV3IFNBWEJ1aWxkZXIoKTsKCQl9IGVs
c2UgewoJCQlidWlsZGVyID0gcEJ1aWxkZXI7CgkJfQoJCWZpbmFsIERvY3VtZW50IGRvYyA9IGxv
YWRIYW5kbGluZ3MocFVybCwgYnVpbGRlcik7CgkJc3luY2hyb25pemVkKGV4Y2VwdGlvbkhhbmRs
aW5nTG9jaykgewoJCQlfZXhjZXB0aW9uSGFuZGxpbmcgPSBkb2M7CgkJfQoJfQoJCglwcml2YXRl
IHN0YXRpYyBEb2N1bWVudCBsb2FkSGFuZGxpbmdzKFVSTCBwRmlsZSwgU0FYQnVpbGRlciBwQnVp
bGRlcikgewoJCS8vIExvYWQgZXhjZXB0aW9uIGhhbmRsaW5nIGRlZmluaXRpb24gZmlsZQoJCQoJ
CXRyeSB7CgkJCWZpbmFsIERvY3VtZW50IGVoZCA9IHBCdWlsZGVyLmJ1aWxkKHBGaWxlKTsKCQkK
CQkJbG9nSW5mbygiU3VjY2Vzc2Z1bGx5IGluaXRpYWxpemVkIGVycm9yIGhhbmRsaW5nIik7CgkJ
CXJldHVybiBlaGQ7CgkJfSAKCQljYXRjaCAoSkRPTUV4Y2VwdGlvbiBlKSB7CgkJCWxvZ0Vycm9y
KCJKRE9NIEVycm9yIGR1cmluZyBpbml0aWFsaXphdGlvbiBvZiBlcnJvciBoYW5kbGluZzogIiAr
IGUuZ2V0TWVzc2FnZSgpKTsKCQkJdGhyb3cgbmV3IFVuZGVjbGFyZWRUaHJvd2FibGVFeGNlcHRp
b24oZSk7CgkJfSAKCQljYXRjaCAoSU9FeGNlcHRpb24gZSkgewoJCQlsb2dFcnJvcigiSU8gRXJy
b3IgZHVyaW5nIGluaXRpYWxpemF0aW9uIG9mIGVycm9yIGhhbmRsaW5nOiAiICsgZS5nZXRNZXNz
YWdlKCkpOwoJCQl0aHJvdyBuZXcgVW5kZWNsYXJlZFRocm93YWJsZUV4Y2VwdGlvbihlKTsKCQl9
Cgl9CgoKCXByaXZhdGUgc3RhdGljIFN0cmluZyBhc1N0cmluZyhTdHJpbmdbXSB0ZW1wUGFydHMp
IHsKCQlTdHJpbmdCdWlsZGVyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcigpOwoJCWZvciAo
U3RyaW5nIHN0cmluZyA6IHRlbXBQYXJ0cykgewoJCQlidWlsZGVyLmFwcGVuZChzdHJpbmcpLmFw
cGVuZCgiLCIpOwoJCX0KCQlyZXR1cm4gYnVpbGRlci50b1N0cmluZygpOwoJfQoKCXByaXZhdGUg
c3RhdGljIGZpbmFsIFN0cmluZyBMT0dfU1ZDX1BBVEggPSAid3gucmVzaWxpZW5jZS5pbXBsLmxv
Z0Vycm9yIjsKCglwdWJsaWMgc3RhdGljIHZvaWQgbG9nSW5mbyhTdHJpbmcgbWVzc2FnZSkgewoJ
CWxvZ0ltcGwobWVzc2FnZSwgIkluZm8iKTsKCX0KCQoJcHVibGljIHN0YXRpYyB2b2lkIGxvZ1dh
cm4oU3RyaW5nIG1lc3NhZ2UpIHsKCQlsb2dJbXBsKG1lc3NhZ2UsICJXYXJuIik7Cgl9CgkKCXB1
YmxpYyBzdGF0aWMgdm9pZCBsb2dFcnJvcihTdHJpbmcgbWVzc2FnZSkgewoJCWxvZ0ltcGwobWVz
c2FnZSwgIkVycm9yIik7Cgl9CgoJcHVibGljIHN0YXRpYyB2b2lkIGxvZ1RyYWNlKFN0cmluZyBt
ZXNzYWdlKSB7CgkJbG9nSW1wbChtZXNzYWdlLCAiVHJhY2UiKTsKCX0KCQoJcHVibGljIHN0YXRp
YyB2b2lkIGxvZ0RlYnVnKFN0cmluZyBtZXNzYWdlKSB7CgkJbG9nSW1wbChtZXNzYWdlLCAiRGVi
dWciKTsKCX0KCQoJcHVibGljIHN0YXRpYyB2b2lkIGxvZ0ZhdGFsKFN0cmluZyBtZXNzYWdlKSB7
CgkJbG9nSW1wbChtZXNzYWdlLCAiRmF0YWwiKTsKCX0KCQoJcHJpdmF0ZSBzdGF0aWMgdm9pZCBs
b2dJbXBsKFN0cmluZyBtZXNzYWdlLCBTdHJpbmcgbGV2ZWwpIHsKCQlJRGF0YSBpbnB1dCA9IElE
YXRhRmFjdG9yeS5jcmVhdGUoKTsKCQlJRGF0YU1hcCBpbnB1dE1hcCA9IG5ldyBJRGF0YU1hcChp
bnB1dCk7CgkJaW5wdXRNYXAucHV0KCJtZXNzYWdlIiwgbWVzc2FnZSk7CgkJaW5wdXRNYXAucHV0
KCJmdW5jdGlvbiIsIFdYX1JFU0lMSUVOQ0VfRVJST1IpOwoJCWlucHV0TWFwLnB1dCgibGV2ZWwi
LCBsZXZlbCk7CgkJCgkJdHJ5IHsKCQkJU2VydmljZS5kb0ludm9rZShMT0dfU1ZDX1BBVEgsICJs
b2ciLCBpbnB1dCk7CgkJfSAKCQljYXRjaCAoRXhjZXB0aW9uIGUpIHsKCQl9Cgl9CgkKCS8vICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKCS8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVhNTCBOT0RFIE5BTUUgREVGSU5JVElP
TlMtLS0tLS0tLS0tLS0tLS0tLS0tLS0KCS8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCXByaXZhdGUgc3RhdGljIGZp
bmFsIFN0cmluZyBFSERfTk9ERV9ET0NfUk9PVF9JRCA9ICJleGNlcHRpb25IYW5kbGluZyI7Cglw
cml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgRUhEX05PREVfR0xPQkFMX0VSUk9SX1RZUEVfSUQg
PSAiZ2xvYmFsRXhjZXB0aW9uIjsKCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBFSERfTk9E
RV9FUlJPUl9MT0NBVElPTl9JRCA9ICJsb2NhdGlvbiI7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBT
dHJpbmcgRUhEX05PREVfRVJST1JfVFlQRV9JRCA9ICJleGNlcHRpb24iOwoKCS8vICoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKCS8vIC0tLS0tLS0tLS0tLS0tLS0tLS1YTUwgTk9ERSBBVFRSSUJVVEUgREVGSU5JVElPTlMt
LS0tLS0tLS0tLS0tLS0tLS0KCS8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0
cmluZyBFSERfQVRUUklCVVRFX0VSUk9SX1RZUEVfSUQgPSAidHlwZSI7Cglwcml2YXRlIHN0YXRp
YyBmaW5hbCBTdHJpbmcgRUhEX0FUVFJJQlVURV9FUlJPUl9DQUxMRVJfVFlQRV9JRCA9ICJjYWxs
ZXJUeXBlIjsJCQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVIRF9BVFRSSUJVVEVfRVJS
T1JfTUVTU0FHRV9DT05UQUlOUyA9ICJlcnJvck1lc3NhZ2VDb250YWlucyI7CQkKCXByaXZhdGUg
c3RhdGljIGZpbmFsIFN0cmluZyBFSERfQVRUUklCVVRFX0VSUk9SX01FU1NBR0VfUkVHRVhfSUQg
PSAiZXJyb3JNZXNzYWdlUmVnZXgiOwkJCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgRUhE
X0FUVFJJQlVURV9MT0NBVElPTl9OQU1FX0lEID0gIm5hbWUiOwoJcHJpdmF0ZSBzdGF0aWMgZmlu
YWwgU3RyaW5nIEVIRF9BVFRSSUJVVEVfRVJST1JfVE9fQkVfVEhST1dOX0lEID0gImVycm9yVG9C
ZVRocm93biI7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgRUhEX0FUVFJJQlVURV9FUlJP
Ul9IQU5ETElOR19JRF9JRCA9ICJleGNlcHRpb25IYW5kbGluZ0lkIjsKCXByaXZhdGUgc3RhdGlj
IGZpbmFsIFN0cmluZyBFSERfQVRUUklCVVRFX0hBTkRMSU5HPSAiaGFuZGxpbmciOwoJcHJpdmF0
ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVIRF9BVFRSSUJVVEVfTUFYX1JFVFJZX0FUVEVNUFRTID0g
Im1heFJldHJ5QXR0ZW1wdHMiOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVIRF9BVFRS
SUJVVEVfUkVUUllfQ09VTlQgPSAicmV0cnlDb3VudCI7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBT
dHJpbmcgRUhEX1BSSU5UX0JVU0lORVNTX09CSkVDVF9JRCA9ICJwcmludEJ1c2luZXNzT2JqZWN0
IjsKCgkvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqCgkvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1YTUwgTk9ERSBWQUxV
RSBERUZJTklUSU9OUy0tLS0tLS0tLS0tLS0tLS0tLS0tCgkvLyAqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCglwcml2YXRl
IHN0YXRpYyBmaW5hbCBTdHJpbmcgRUhEX1ZBTFVFX0dFTkVSSUNfRVJST1JfVFlQRV9JRCA9ICJh
bGwiOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVIRF9WQUxVRV9HTE9CQUxfRVJST1Jf
SEFORExJTkdfSUQgPSAiZ2xvYmFsIjsKCgkvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgkvLyAtLS0tLS0tLS0tLS0t
LS0tLS1JTlBVVCBFUlJPUiBGSUVMRCBJRCBERUZJTklUSU9OUy0tLS0tLS0tLS0tLS0tLS0tCgkv
LyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgRVJST1JfSU5GT19JRCA9
ICJleGNlcHRpb25JbmZvIjsKCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBFWENMVURFX1NF
UlZJQ0UgPSAiQFd4UmVzaWxpZW5jZS5lcnJvckhhbmRsaW5nLmV4Y2x1ZGVTZXJ2aWNlRnJvbUVy
cm9ySGFuZGxpbmdAIjsKCQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVSUk9SX0lORk9f
RVJST1IgPSAiZXJyb3IiOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVSUk9SX0lORk9f
RVJST1JfVFlQRSA9ICJlcnJvclR5cGUiOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVS
Uk9SX0lORk9fQ0FMTF9TVEFDS19TRVJWSUNFID0gInNlcnZpY2UiOwoJcHJpdmF0ZSBzdGF0aWMg
ZmluYWwgU3RyaW5nIEVSUk9SX0lORk9fQ0FMTF9TVEFDS19GTE9XX1NURVAgPSAiZmxvd1N0ZXAi
OwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVSUk9SX0lORk9fQ0FMTF9TVEFDSyA9ICJj
YWxsU3RhY2siOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVSUk9SX0lORk9fRVJST1Jf
RFVNUCA9ICJlcnJvckR1bXAiOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVSUk9SX0lO
Rk9fVElNRSA9ICJ0aW1lIjsKCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBFUlJPUl9JTkZP
X05FU1RFRF9FUlJPUl9JRCA9ICJuZXN0ZWRFcnJvckluZm8iOwoKCXByaXZhdGUgc3RhdGljIGZp
bmFsIFN0cmluZyBHRU5FUklDX1ZBTFVFX01BUF9JRCA9ICJnZW5lcmljVmFsdWVNYXAiOwoJcHJp
dmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEdFTkVSSUNfRVJST1JfTUVTU0FHRV9JRCA9ICJnZW5l
cmljRXJyb3JNZXNzYWdlIjsKCgkvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgkvLyAtLS0tLS0tLS0tLS0tLU9VVFBV
VCBIQU5ETEVEIEVSUk9SIEZJRUxEIElEIERFRklOSVRJT05TLS0tLS0tLS0tLS0tCgkvLyAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgSEFORExFRF9FUlJPUl9JTkZPX0lE
ID0gImhhbmRsZWRFcnJvckluZm8iOwoJCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgSEFO
RExFRF9FUlJPUl9JTkZPX1JPT1RfSUQgPSAidG9wU2VydmljZUVycm9yIjsKCXByaXZhdGUgc3Rh
dGljIGZpbmFsIFN0cmluZyBIQU5ETEVEX0VSUk9SX0lORk9fSEFORExFRF9JRCA9ICJoYW5kbGVk
U2VydmljZUVycm9yIjsKCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBIQU5ETEVEX0VSUk9S
X0lORk9fQVBQTElDQVRJT05fU0VSVklDRV9JRCA9ICJhcHBsaWNhdGlvblNlcnZpY2VFcnJvciI7
Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgSEFORExFRF9FUlJPUl9JTkZPX09SSUdJTl9J
RCA9ICJyb290U2VydmljZUVycm9yIjsKCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgSEFO
RExFRF9FUlJPUl9JTkZPX0hBTkRMSU5HX0xPQ0FUSU9OX0lEID0gImhhbmRsaW5nTG9jYXRpb24i
OwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEhBTkRMRURfRVJST1JfSU5GT19IQU5ETElO
R19UWVBFX0lEID0gImhhbmRsaW5nVHlwZSI7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcg
SEFORExFRF9FUlJPUl9JTkZPX0RFUFRIX0lEID0gImVycm9yRGVwdGgiOwoJcHJpdmF0ZSBzdGF0
aWMgZmluYWwgU3RyaW5nIEhBTkRMRURfRVJST1JfSU5GT19FUlJPUl9DT0RFID0gImVycm9yQ29k
ZSI7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgSEFORExFRF9FUlJPUl9JTkZPX0NBTExf
U1RBQ0sgPSAiY2FsbFN0YWNrIjsKCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBIQU5ETEVE
X0VSUk9SX0lORk9fRVJST1JfRFVNUCA9ICJlcnJvckR1bXAiOwoJcHJpdmF0ZSBzdGF0aWMgZmlu
YWwgU3RyaW5nIEhBTkRMRURfRVJST1JfSU5GT19USU1FID0gInRpbWUiOwoJcHJpdmF0ZSBzdGF0
aWMgZmluYWwgU3RyaW5nIEhBTkRMRURfRVJST1JfSU5GT19QSVBFTElORSA9ICJwaXBlbGluZSI7
CgoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVSUk9SX01TR19JRCA9ICJlcnJvck1lc3Nh
Z2UiOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIENPTVBBQ1RfRVJST1JfTE9DQVRJT05f
SUQgPSAiZXJyb3JMb2NhdGlvbiI7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ09NUEFD
VF9FUlJPUl9GTE9XX1NURVAgPSAiZXJyb3JGbG93U3RlcCI7Cglwcml2YXRlIHN0YXRpYyBmaW5h
bCBTdHJpbmcgRVJST1JfVFlQRV9JRCA9ICJlcnJvclR5cGUiOwoKCS8vICoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCS8v
IC0tLS0tLS0tLS0tLS0tLS0tLS1HRU5FUklDIERPQyBGSUVMRCBJRCBERUZJTklUSU9OUy0tLS0t
LS0tLS0tLS0tLS0KCS8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioKCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBC
VVNJTkVTU19ET0NfSUQgPSAiYnVzaW5lc3NPYmplY3QiOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwg
U3RyaW5nIFBSSU5UX0JVU0lORVNTX09CSkVDVF9JRCA9ICJwcmludEJ1c2luZXNzT2JqZWN0IjsK
CgkvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqCgkvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLUVYQ0VQVElPTiBIQU5ETElO
RyBERUZJTklUSU9OLS0tLS0tLS0tLS0tLS0tLS0tCgkvLyAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCglwcml2YXRlIHN0
YXRpYyBmaW5hbCBTdHJpbmcgTUVUQURBVEFfSUQgPSAibWV0YURhdGEiOwoJcHJpdmF0ZSBzdGF0
aWMgZmluYWwgU3RyaW5nIFVJRF9JRCA9ICJ1dWlkIjsKCgkvLyAqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgkvLyAtLS0t
LS0tLS0tLS0tLS0tLS0tLUVYQ0VQVElPTiBIQU5ETElORyBERUZJTklUSU9OLS0tLS0tLS0tLS0t
LS0tLS0tCgkvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqCglwcml2YXRlIHN0YXRpYyBEb2N1bWVudCBfZXhjZXB0aW9u
SGFuZGxpbmc7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBPYmplY3QgZXhjZXB0aW9uSGFuZGxpbmdM
b2NrID0gbmV3IE9iamVjdCgpOwoJcHJpdmF0ZSBzdGF0aWMgRXhjZXB0aW9uSGFuZGxpbmdMaXN0
ZW5lciBfZXhjZXB0aW9uSGFuZGxpbmdMaXN0ZW5lcjsKCXByaXZhdGUgc3RhdGljIENhbGxlclR5
cGVTdXBwbGllciBERUZBVUxUX0NBTExFUl9UWVBFX1NVUFBMSUVSID0gbmV3IENhbGxlclR5cGVT
dXBwbGllcigpIHsKCQlAT3ZlcnJpZGUKCQlwdWJsaWMgU3RyaW5nIGdldCgpIHsKCQkJcmV0dXJu
IGdldENhbGxlclR5cGVCeUNhbGxpbmdTZXJ2aWNlKCk7CgkJfQoJfTsKCXByaXZhdGUgc3RhdGlj
IENhbGxlclR5cGVTdXBwbGllciBjYWxsZXJUeXBlU3VwcGxpZXIgPSBudWxsOwoJcHJpdmF0ZSBz
dGF0aWMgZmluYWwgT2JqZWN0IGNhbGxlclR5cGVTdXBwbGllckxvY2sgPSBuZXcgT2JqZWN0KCk7
Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBPYmplY3QgZXhjZXB0aW9uSGFuZGxpbmdMaXN0ZW5lckxv
Y2sgPSBuZXcgT2JqZWN0KCk7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBPYmplY3QgY3JlYXRlU3Vt
bWFyaXplZEV4Y2VwdGlvbkhhbmRsaW5nTG9jayA9IG5ldyBPYmplY3QoKTsKCS8vICoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKCS8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tSU5QVVQgR0VUIFZBTFVFIERFRklOSVRJT04tLS0t
LS0tLS0tLS0tLS0tLS0tLS0KCS8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0
cmluZyBNQVhfUkVUUllfQVRURU1QVFNfQkVGT1JFX0NBTkNFTF9SRVRSWSA9ICJtYXhSZXRyeUF0
dGVtcHRzQmVmb3JlQ2FuY2VsUmV0cnkiOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEJS
RUFLX1JFVFJZX0xPT1AgPSAiYnJlYWsucmV0cnkubG9vcC5mb3IuIjsKCS8vICoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
CS8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tRVJST1IgVkFMVUUgREVGSU5JVElPTi0tLS0tLS0tLS0t
LS0tLS0tLS0tLQoJLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKgoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVS
Uk9SX1RSQU5TSUVOVCA9ICJUUkFOU0lFTlQiOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5n
IEVSUk9SX0ZBVEFMID0gIkZBVEFMIjsKCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBFUlJP
Ul9OT05FID0gIk5PTkUiOwkKCQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFNVTU1BUkla
RURfRVhDRVBUSU9OX0hBTkRMSU5HX0ZJTEUgPSAiRXhjZXB0aW9uSGFuZGxpbmdTdW1tYXJpemVk
LnhtbCI7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgRVhDRVBUSU9OX0hBTkRMSU5HX1hT
RF9GSUxFID0gIkV4Y2VwdGlvbkhhbmRsaW5nLnhzZCI7Cglwcml2YXRlIHN0YXRpYyBmaW5hbCBT
dHJpbmcgV1hfUkVTSUxJRU5DRSA9ICJXeFJlc2lsaWVuY2UiOwoJcHJpdmF0ZSBzdGF0aWMgZmlu
YWwgU3RyaW5nIFdYX1JFU0lMSUVOQ0VfRVJST1IgPSAiV3hSZXNpbGllbmNlLkVycm9yIjsKCXBy
aXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBFUlJPUl9IQU5ETElOR19YTUxfRklMRSA9ICJFeGNl
cHRpb25IYW5kbGluZy54bWwiOwoKCgkKCQoJCgkKCQoJCgk=</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>com.softwareag.util.IDataMap</value>
    <value>com.wm.app.audit.IAuditRuntime</value>
    <value>wx.resilience.impl.ErrorInfo</value>
    <value>wx.resilience.impl.SummarizedExceptionHandlingHandler</value>
    <value>wx.resilience.impl.SummarizedExceptionHandlingHandler.Creator</value>
    <value>wx.resilience.impl.Exceptions</value>
    <value>wx.resilience.impl.Paths</value>
    <value>com.wm.lang.ns.NSName</value>
    <value>java.io.File</value>
    <value>java.io.IOException</value>
    <value>java.util.*</value>
    <value>javax.xml.transform.Source</value>
    <value>javax.xml.transform.stream.StreamSource</value>
    <value>javax.xml.validation.Schema</value>
    <value>javax.xml.validation.SchemaFactory</value>
    <value>javax.xml.validation.Validator</value>
    <value>org.jdom.Document</value>
    <value>org.jdom.Element</value>
    <value>org.jdom.JDOMException</value>
    <value>org.jdom.input.SAXBuilder</value>
    <value>org.jdom.xpath.XPath</value>
    <value>org.xml.sax.SAXException</value>
    <value>com.wm.app.b2b.server.*</value>
    <value>java.lang.reflect.UndeclaredThrowableException</value>
    <value>java.net.URL</value>
    <value>java.nio.file.Path</value>
    <value>com.wm.lang.ns.NSService</value>
  </array>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
</Values>
